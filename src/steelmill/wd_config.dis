/*=============================================================================
Vitalnix User Management Suite
steelmill/wd_config.cpp
  Copyright Â© Jan Engelhardt <jengelh [at] gmx de>, 2005 - 2006
  -- License restrictions apply (LGPL v2.1)

  This file is part of Vitalnix.
  Vitalnix is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as published
  by the Free Software Foundation; however ONLY version 2 of the License.

  Vitalnix is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this program kit; if not, write to:
  Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
  Boston, MA  02110-1301  USA

  -- For details, see the file named "LICENSE.LGPL2"
=============================================================================*/
#include <cerrno>
#include <cstdio>
#include <cstring>
#include <libHX.h>
#include <wx/wxprec.h>
#ifndef WX_PRECOMP
#    include <wx/wx.h>
#endif
#include <wx/notebook.h>
#include <wx/spinctrl.h>
#include <wx/statline.h>
#include "libvxutil/defines.h"
#include "steelmill/wd_config.hpp"
#include "steelmill/xu_common.hpp"

struct vitalnix_opt {
    char *db_backend, *db_encoding;
    unsigned int db_upaflush;

    char *ldap_basedn, *ldap_rootdn,
     *sh_passwd, *sh_shadow, *sh_group,
     *master_preadd, *master_postadd, *master_predel, *master_postdel,
     *user_preadd, *user_postadd, *user_predel, *user_postdel;

    char *pw_method;
    unsigned int pw_length, pw_phonemic;

    char *pa_home, *pa_shell, *pa_skel;
    unsigned int pa_split;
};

static const wxString
  backends[]  = {wxT("shadow"), wxT("ldap")},
  encodings[] = {wxT("UTF-8"), wxT("ISO-8859-1")},
  flushes[]   = {wxT("default"), wxT("on"), wxT("off"), wxT("postadd")},
  methods[]   = {wxT("Blowfish"), wxT("SSHA"), wxT("SHA"), wxT("MD5"), wxT("DES")};

enum {
    ID_BACKEND = 1,
};

BEGIN_EVENT_TABLE(WD_Config, wxDialog)
    EVT_BUTTON(wxID_OPEN, WD_Config::Load)
    EVT_BUTTON(wxID_SAVE, WD_Config::Save)
END_EVENT_TABLE()

//-----------------------------------------------------------------------------
WD_Config::WD_Config(wxWindow *parent) :
    wxDialog(parent, wxID_ANY, wxT(PROD_NAME " > Configuration"),
     wxDPOS, wxDSIZE, wxCFF)
{
    wxBoxSizer *vp = new wxBoxSizer(wxVERTICAL);
    wxNotebook *nb = new wxNotebook(this, wxID_ANY);
    nb->AddPage(nb_paths(nb),    wxT("Paths"));
    nb->AddPage(nb_password(nb), wxT("Passwords"));
    nb->AddPage(nb_external(nb), wxT("External scripts"));
    nb->AddPage(nb_database(nb), wxT("Database"));

    wxBoxSizer *hp = new wxBoxSizer(wxHORIZONTAL);
    hp->Add(new wxButton(this, wxID_HELP, wxT("&Help")), 0, wxALL, 5);
    hp->Add(1, 1, 1);
    hp->Add(new wxButton(this, wxID_OPEN, wxT("&Load")), 0, wxALL, 5);
    hp->Add(new wxButton(this, wxID_SAVE, wxT("&Save")), 0, wxALL, 5);
    hp->Add(new wxButton(this, wxID_CANCEL, wxT("&Cancel")), 0, wxALL, 5);
    hp->Add(new wxButton(this, wxID_OK, wxT("&OK")), 0, wxALL, 5);

    vp->Add(nb, 1, wxGROW | wxALL, 5);
    vp->Add(new wxStaticLine(this, wxID_ANY, wxDPOS, wxDSIZE, wxLI_HORIZONTAL), 0, wxGROW | wxTOP | wxBOTTOM, 5);
    vp->Add(hp, 0, wxGROW);

    SetSizer(vp);
    vp->SetSizeHints(this);
    Center();
    return;
}

//-----------------------------------------------------------------------------
void WD_Config::Load(wxCommandEvent &event) {
    return;
}

extern "C" static int config_save(const char *f, void *p) {
    return 0;
}

void WD_Config::Save(wxCommandEvent &event) {
    struct vitalnix_opt *q = new struct vitalnix_opt;
    int eax;

    HX_strclone(&q->db_backend,  tU8(db_backend->GetValue()));
    HX_strclone(&q->db_encoding, tU8(db_encoding->GetValue()));
    q->db_upaflush = db_upaflush->GetValue();

    HX_strclone(&q->ldap_basedn, tU8(ldap_basedn->GetValue()));
    HX_strclone(&q->ldap_rootdn, tU8(ldap_rootdn->GetValue()));

    HX_strclone(&q->sh_passwd,   sh_passwd->GetValue());
    HX_strclone(&q->sh_shadow,   sh_shadow->GetValue());
    HX_strclone(&q->sh_group,    sh_group->GetValue());

    HX_strclone(&q->master_preadd,  ct_master_preadd->GetValue());
    HX_strclone(&q->master_postadd, ct_master_postadd->GetValue());
    HX_strclone(&q->master_predel,  ct_master_predel->GetValue());
    HX_strclone(&q->master_postdel, ct_master_postdel->GetValue());
    HX_strclone(&q->user_preadd,  ct_user_preadd->GetValue());
    HX_strclone(&q->user_postadd, ct_user_postadd->GetValue());
    HX_strclone(&q->user_predel,  ct_user_predel->GetValue());
    HX_strclone(&q->user_postdel, ct_user_postdel->GetValue());

    HX_strclone(&q->pw_method, tU8(methods[pw_method->GetSelection()]));
    q->pw_length   = pw_length->GetValue(),
    q->pw_phonemic = pw_phonemic->GetValue();

    if((eax = config_save("vitalnix.cfg", q)) <= 0) {
        char buf[256];
        snprintf(buf, sizeof(buf), "Error saving to vitalnix.cfg: %s",
         strerror(eax));
        GD_Message(this, "Configuration > Save", buf, "-o").ShowModal();
        return;
    }

    GD_Message(this, "Configuration > Save", "Successfully wrote vitalnix.cfg",
        "-o").ShowModal();
    
    return;
}

wxPanel *WD_Config::nb_database(wxNotebook *parent) {
    wxPanel *panel = new wxPanel(parent);
    wxBoxSizer *vp = new wxBoxSizer(wxVERTICAL);

    wxStaticBox *sb_gen      = new wxStaticBox(panel, wxID_ANY, "General");
    wxStaticBoxSizer *sp_gen = new wxStaticBoxSizer(sb_gen, wxVERTICAL);
    wxFlexGridSizer *sf_gen  = new wxFlexGridSizer(2);
    sf_gen->AddGrowableCol(1);
    sf_gen->Add(new wxStaticText(panel, wxID_ANY, "Database backend:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_gen->Add(db_backend = new wxComboBox(panel, ID_BACKEND, wxEmptyString, wxDPOS, wxDSIZE, ARRAY_SIZE(backends), backends), 0, wxGROW | wxACV | wxALL, 3);
    sf_gen->Add(new wxStaticText(panel, wxID_ANY, "Encoding:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_gen->Add(db_encoding = new wxComboBox(panel, wxID_ANY, wxEmptyString, wxDPOS, wxDSIZE, ARRAY_SIZE(encodings), encodings), 0, wxGROW | wxACV | wxALL, 3);
    sf_gen->Add(new wxStaticText(panel, wxID_ANY, "Autoflush:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_gen->Add(db_upaflush = new wxCheckBox(panel, wxID_ANY, "Flush DB before postadd runs"), 0, wxGROW | wxACV | wxALL, 3);
    sp_gen->Add(sf_gen, 1, wxGROW);

    wxStaticBox *sb_ldap      = new wxStaticBox(panel, wxID_ANY, "LDAP Backend");
    wxStaticBoxSizer *sp_ldap = new wxStaticBoxSizer(sb_ldap, wxVERTICAL);
    wxFlexGridSizer *sf_ldap  = new wxFlexGridSizer(2);
    sf_ldap->AddGrowableCol(1);
    sf_ldap->Add(new wxStaticText(panel, wxID_ANY, "Base DN (suffix):"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_ldap->Add(ldap_basedn = new wxTextCtrl(panel, wxID_ANY, "dc=example,dc=com"), 0, wxGROW | wxACV | wxALL, 3);
    sf_ldap->Add(new wxStaticText(panel, wxID_ANY, "Root DN (with suffix):"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_ldap->Add(ldap_rootdn = new wxTextCtrl(panel, wxID_ANY, "cn=Manager,dc=example,dc=com"), 0, wxGROW | wxACV | wxALL, 3);
    sp_ldap->Add(sf_ldap, 1, wxGROW);

    wxStaticBox *sb_shd      = new wxStaticBox(panel, wxID_ANY, "Shadow Backend");
    wxStaticBoxSizer *sp_shd = new wxStaticBoxSizer(sb_shd, wxVERTICAL);
    wxFlexGridSizer *sf_shd  = new wxFlexGridSizer(2);
    sf_shd->AddGrowableCol(1);
    sf_shd->Add(new wxStaticText(panel, wxID_ANY, "User file:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_shd->Add(sh_passwd = new GW_FTC(panel, "/etc/passwd", 3), 0, wxGROW | wxACV);
    sf_shd->Add(new wxStaticText(panel, wxID_ANY, "Secrets file:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_shd->Add(sh_shadow = new GW_FTC(panel, "/etc/shadow", 3), 0, wxGROW | wxACV);
    sf_shd->Add(new wxStaticText(panel, wxID_ANY, "Group file:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_shd->Add(sh_group = new GW_FTC(panel, "/etc/group", 3), 0, wxGROW | wxACV);
    sp_shd->Add(sf_shd, 1, wxGROW);

    vp->Add(sp_gen, 0, wxGROW | wxALL, 5);
    vp->Add(sp_ldap, 0, wxGROW | wxALL, 5);
    vp->Add(sp_shd, 0, wxGROW | wxALL, 5);
    panel->SetSizer(vp);
    vp->SetSizeHints(panel);
    return panel;
}

wxPanel *WD_Config::nb_external(wxNotebook *parent) {
    wxPanel *panel = new wxPanel(parent);
    wxBoxSizer *vp = new wxBoxSizer(wxVERTICAL);

    wxStaticBox *sb_master = new wxStaticBox(panel, wxID_ANY, "Master scripts");
    wxStaticBoxSizer *sp_master = new wxStaticBoxSizer(sb_master, wxVERTICAL);
    wxFlexGridSizer *sf_master = new wxFlexGridSizer(2);
    sf_master->AddGrowableCol(1);
    sf_master->Add(new wxStaticText(panel, wxID_ANY, "pre-add:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_master->Add(ct_master_preadd = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sf_master->Add(new wxStaticText(panel, wxID_ANY, "post-add:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_master->Add(ct_master_postadd = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sf_master->Add(new wxStaticText(panel, wxID_ANY, "pre-mod:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_master->Add(ct_master_premod = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sf_master->Add(new wxStaticText(panel, wxID_ANY, "post-mod:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_master->Add(ct_master_postmod = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sf_master->Add(new wxStaticText(panel, wxID_ANY, "pre-delete:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_master->Add(ct_master_predel = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sf_master->Add(new wxStaticText(panel, wxID_ANY, "post-delete:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_master->Add(ct_master_postdel = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sp_master->Add(sf_master, 1, wxGROW);

    wxStaticBox *sb_user = new wxStaticBox(panel, wxID_ANY, "Per-user scripts");
    wxStaticBoxSizer *sp_user = new wxStaticBoxSizer(sb_user, wxVERTICAL);
    wxFlexGridSizer *sf_user = new wxFlexGridSizer(2);
    sf_user->AddGrowableCol(1);
    sf_user->Add(new wxStaticText(panel, wxID_ANY, "pre-add:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_user->Add(ct_user_preadd = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sf_user->Add(new wxStaticText(panel, wxID_ANY, "post-add:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_user->Add(ct_user_postadd = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sf_user->Add(new wxStaticText(panel, wxID_ANY, "pre-mod:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_user->Add(ct_user_premod = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sf_user->Add(new wxStaticText(panel, wxID_ANY, "post-mod:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_user->Add(ct_user_postmod = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sf_user->Add(new wxStaticText(panel, wxID_ANY, "pre-delete:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_user->Add(ct_user_predel = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sf_user->Add(new wxStaticText(panel, wxID_ANY, "post-delete:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf_user->Add(ct_user_postdel = new GW_FTC(panel, NULL, 3), 0, wxGROW | wxACV);
    sp_user->Add(sf_user, 1, wxGROW);

    vp->Add(sp_master, 0, wxGROW | wxALL, 5);
    vp->Add(sp_user, 0, wxGROW | wxALL, 5);
    panel->SetSizer(vp);
    vp->SetSizeHints(panel);
    return panel;
}

wxPanel *WD_Config::nb_password(wxNotebook *parent) {
    wxPanel *panel = new wxPanel(parent);
    wxBoxSizer *vp = new wxBoxSizer(wxVERTICAL);

    wxStaticBox *sb = new wxStaticBox(panel, wxID_ANY, "General");
    wxStaticBoxSizer *sp = new wxStaticBoxSizer(sb, wxVERTICAL);
    wxFlexGridSizer *sf = new wxFlexGridSizer(2);
    sf->AddGrowableCol(1);
    sf->Add(new wxStaticText(panel, wxID_ANY, "Encryption method:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf->Add(pw_method = new wxChoice(panel, wxID_ANY, wxDPOS, wxDSIZE, ARRAY_SIZE(methods), methods), 0, wxGROW | wxACV | wxALL, 3);
    sf->Add(new wxStaticText(panel, wxID_ANY, "Length:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf->Add(pw_length = new wxSpinCtrl(panel, wxID_ANY), 0, wxALIGN_LEFT | wxACV | wxALL, 3);
    sf->Add(1, 1);
    sf->Add(pw_phonemic = new wxCheckBox(panel, wxID_ANY, "Generate phonemic passwords"), 0, wxALIGN_LEFT | wxACV | wxALL, 3);
    sp->Add(sf, 1, wxGROW);

    pw_length->SetRange(7, 72);
    pw_length->SetValue(9);
    vp->Add(sp, 0, wxGROW | wxALL, 5);
    panel->SetSizer(vp);
    vp->SetSizeHints(panel);
    return panel;
}

wxPanel *WD_Config::nb_paths(wxNotebook *parent) {
    wxPanel *panel = new wxPanel(parent);
    wxBoxSizer *vp = new wxBoxSizer(wxVERTICAL);

    wxStaticBox *sb = new wxStaticBox(panel, wxID_ANY, "Paths");
    wxStaticBoxSizer *sp = new wxStaticBoxSizer(sb, wxVERTICAL);
    wxFlexGridSizer *sf = new wxFlexGridSizer(2);
    sf->AddGrowableCol(1);
    sf->Add(new wxStaticText(panel, wxID_ANY, "Home base:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf->Add(pa_home = new GW_FTC(panel, "/home", 3, FTC_DIRECTORY), 0, wxGROW | wxACV);
    sf->Add(new wxStaticText(panel, wxID_ANY, "Split level:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf->Add(pa_split = new wxSpinCtrl(panel, wxID_ANY), 0, wxALIGN_LEFT | wxACV | wxALL, 3);
    sf->Add(new wxStaticText(panel, wxID_ANY, "Shell:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf->Add(pa_shell = new GW_FTC(panel, "/bin/bash", 3), 0, wxGROW | wxACV);
    sf->Add(new wxStaticText(panel, wxID_ANY, "Skeleton directory:"), 0, wxALIGN_RIGHT | wxACV | wxALL, 3);
    sf->Add(pa_skel = new GW_FTC(panel, "/var/lib/empty", 3), 0, wxGROW | wxACV);
    sp->Add(sf, 1, wxGROW);

    pa_split->SetRange(0, 2);
    vp->Add(sp, 0, wxGROW | wxALL, 5);
    panel->SetSizer(vp);
    vp->SetSizeHints(panel);
    return panel;
}

/* const char *WD_Config::DH_Config =
  "Configuration of Vitalnix\n\n"

  "Vitalnix can be configured in two ways: one is to edit the configuration "
  "file by hand using your favorite editor, the other is to use this "
  "configuration dialog.\n\n"
; */

//=============================================================================
