#!/usr/bin/perl
# Verwalten von Benutzern mit Hilfe von Daten aus der Schulverwaltung
# von Eike Teiwes 15.09.98

$pwdfile = "/etc/passwd";	# üblich ist $pwdfile="/etc/passwd"
$daten = "daten.format";	# Quelle der aktuellen Daten
$test=0; 			# =1 zusätzliche Meldungen ausgeben
$aktuelleDatei=0;		# =1 Datei mit aktuellen Schülern anlegen
print "\f";
print "          ----------------------------------------------------\n";
print "                Schülerdaten mit Passwort-Datei abgleichen\n";
print "          ----------------------------------------------------\n\n";

&vorbereitungen;

print "Die vorhandenen Benutzer werden aus '$pwdfile' gelesen...\n";
passwd_auslesen();
print " --> Es liegen $i Schüler in '$pwdfile' vor.\n\n";

print "Aktuelle Schülerdaten aus '$daten' lesen und ...\n";
#print "aktuelle vorhandene Namen in '$addakt' sichern und ...\n"; 
print "neue aktuelle Schüler in '$datadd' sichern...\n"; 
daten_auslesen();
print "--> Es wurden $j neue Schüler festgestellt.\n";
if ($k) {
    print "          ----------------------------------------------------\n";
    print "            ACHTUNG: $kmal Überlauf (siehe Datei $daterr)\n";
    print "          ----------------------------------------------------\n";
    print "\n";
    exit;
}
print "\n";

#print "Aktuelle Schüler aus '$addakt' lesen...\n";
#aktuell_auslesen();
#print " --> $l Benutzer nach wie vor in '$addakt'\n";

print "In '$pwdfile' vorliegende Schüler kontrollieren ...\n";
print "und abgegangene Namen in Datei '$datdel' sichern\n"; 
passwd_ausmisten($datdel);
print "--> Es sind $m Schüler abgegangen.\n\n";

#unlink($datakt);

print "          ----------------------------------------------------\n";
print "               Starten Sie jetzt 'lstadd' (und 'lstdel').\n";
print "          ----------------------------------------------------\n";
print "\n";

# --------------------------------------------------------------------

sub vorbereitungen {

    @f=`find $daten 2>/dev/null`;
    if ($f[0] eq "") {
	print "          ----------------------------------------------------\n";
	print "                 FEHLER: Datei '$daten' fehlt.\n";
	print "                 Starten Sie zuvor das Programm 'format'.\n\n";
	print "          ----------------------------------------------------\n";
	print "\n";
	exit;
    }

#    @f=`find skel/ 2>/dev/null`;
#    if ($f[0] eq "") {
#	print "\nlokales Verzeichnis skel fehlt und wird eingerichtet.\n";
#	system("mkdir skel");
#	system("cp /etc/skel/.profile skel");
#    }

    $gruppe=group("schueler");
    if ($gruppe eq "") {
	print "\nGruppe 'schueler' fehlt und wird eingerichtet.\n";
	system("groupadd schueler");
	$gruppe=group("schueler");
    }

    $index=next_index("dat???.???");
    $datadd="datadd.".$index;
    $daterr="daterr.".$index;
    $datdel="datdel.".$index;
    $datakt="datakt.".$index; # aktuelle Schüler (nicht erforderlich)
}

# --------------------------------------------------------------------

sub passwd_auslesen {
    $i=0;
    open (PWD,"$pwdfile");
    while (<PWD>) {
	chop;
        ($name,$passwd,$uid,$gid,$gcos)=split(/:/);
#	($fullname,$code)=split(/,/,$gcos);
	if (substr($name,0,1) eq "#") {
		$name=substr($name,1);	# gesperrter User
	}
	($gcos1,$gcos2)=split(/,/,$gcos);
	$feld{$name}=$gcos1.",".$gcos2;
	if ($test eq 3) {print "$name<--$gcos\n";}
	if ($gid eq $gruppe) {
            ++$i;
        }
    }	
    close(PWD);
}

# --------------------------------------------------------------------

sub daten_auslesen {
    open (ADD,">$datadd");
    if ($aktuelleDatei) {open (SDF,">$datakt");}
    open (QUELLE,"$daten");
    $k=0;
    $j=0;
    EINTRAG: while (<QUELLE>) {
	chop;
        ($name,$gcos,$class)=split(/:/);
        ($fullname,$code)=split(/,/,$gcos);
        $vorhanden="n";
	if ($feld{$name} eq $gcos){
	    $vorhanden="";
	}
	foreach $i (1..9,A..Z) {
	    if ($feld{$name.$i} eq $gcos) {
		$vorhanden=$i;
	    }
        }
        if ($vorhanden ne "n") {	
	    if ($test eq 1) {print "### $name$vorhanden ($fullname) vorhanden\n";}
	    if ($aktuelleDatei) {print SDF "$name$vorhanden:$gcos\n";}
	    $feld{$name.$vorhanden}="0";
	    next EINTRAG;
	}    
	$_=$name."Z";
	if ($feld{$_} ne "") {
	    print "ÜBERLAUF: Alle $name sind belegt!\n";
            open (ERR,">>$daterr");
	    print ERR "Ueberlauf: $name:$gcos\n";
	    close(ERR);
	    $k++;
	} else {
	    while ((/.*[1-9A-Z]/) && ($feld{$_} eq "")) {
		tr/1-9A-Z/0-9A-Y/;
	    }
	    if ($test eq 2) {print "### abwärts bis $_\n";}
            if ((/.*[1-9A-Z]/) || ($feld{$name} ne "")) {
		if ($test eq 2) {print "### $_ belegt, suche weiter ... ";}
	        ++$K;
		tr/0-9A-Y/1-9A-Z/;
		if ($test eq 2) {print "### ... finde $_\n"};
	    } 
        }
	s/0//;
	if ($test eq 2) {print "### Name: $_\n"};
	$feld{$_}=$fullname;
	print ADD "$_:$gcos:$class\n";
	if ($aktuelleDatei) {print SDF "$_:$gcos\n";}
	$feld{$name.$vorhanden}="0";
	$j++;
    }
    close (QUELLE);
    if ($aktuelleDatei) {close (SDF);}
    close (ADD);
}

# --------------------------------------------------------------------

#	sub aktuell_auslesen {
#	    $l=0;
#	    open (SDF,"$aktuell");
#	    while (<SDF>) {
#	        ($name)=split(/:/);
#		$feld{$name}="0";
#		++$l;
#	    }	
#	    close(SDF);
#	} 

# --------------------------------------------------------------------

sub passwd_ausmisten {
    local($del)=@_;
    open (PWD,"$pwdfile");
    open (DEL,">".$del);
    $m=0;
    while (<PWD>) {
        if ($_ eq "") {
	    next;
	}
	($name,$passwd,$uid,$gid,$gcos)=split(/:/);
	if (substr($name,0,1) eq "#") {
		$name=substr($name,1);	# gesperrter User
	}
	if ($feld{$name} ne "0") {
	    if ($gid eq $gruppe) {
          	print DEL "$name:$gcos\n";
		++$m;
	    }
	}    
    }
    close (DEL);
    close (PWD);
    if ($m eq 0) {
	unlink($del);
    }
}

# --------------------------------------------------------------------

sub next_index {
    $_=sprintf("%03d",max_index(@_)+1);
    $_;
}

# --------------------------------------------------------------------

sub max_index {
    local($max)="000";
    foreach (`find @_ 2>/dev/null`) {
	$i=substr($_,-3,3);
	if ($i>$max) {
	    $max=$i;
	}
    }	
    $_=sprintf("%03d",$max);
    $_;
}

# --------------------------------------------------------------------

sub group {
    local($name)=@_;
    $_=`grep $name /etc/group`;
    /(\w+)\W+(\w+)\W+(\w+)/;
    $3;
}

