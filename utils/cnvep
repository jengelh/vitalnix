#!/usr/bin/perl
#==============================================================================
# cnvep - Programm zur Konvertierung des GECOS-Datums
#   Copyright (C) Jan Engelhardt <jengelh@gmx.de>, 2001 - 2003
#   v1.06 (24. August 2002)
#
#   Konvertierung der </etc/passwd> DAUtool v0.x- zur
#   DAUtool v1.x-Kodierung. Näheres siehe <doc/DAUtool.html>.
#==============================================================================
BEGIN { push(@INC, "base", "../base"); }
use Codec::DAUtool;
use Getopt::Long;
select((select(STDOUT), $| = 1)[0]);
select((select(STDERR), $| = 1)[0]);
*unscramble = \&Codec::DAUtool::type1_unscramble;
*scramble = \&Codec::DAUtool::scramble;

($inputf, $outputf, $scangid) = ("/etc/passwd", "-", ".*?");
&Getopt::Long::Configure(qw(bundling pass_through));
&GetOptions("h" => \$wanthelp, "i|inputf=s" => \$inputf, "o|outputf=s" =>
 \$outputf, "g|gid=i" => \$scangid);

if($wanthelp) { exec "pod2man $0 | man -l -"; }

if($scangid eq "") {
  print STDERR "Keine zu durchsuchende Gruppe angegeben.\n";
  print STDERR "Alle Gruppen werden durchsucht.\n";
}

open(IN, "<".$inputf) ||
 die sprintf "Konnte <%s> nicht öffnen: %s\n", $inputf, $!;
@IN = <IN>;
close(IN);

open(OUT, ">".$outputf) ||
 die sprintf "Konnte <%s> nicht öffnen: %s\n", $outputf, $!;
select((select(IN), $| = 1)[0]);
select((select(OUT), $| = 1)[0]);

foreach $_ (@IN) {
  chomp($_);
  @_ = split(/:/o, $_);
  @gcos = split(/,/o, $_[4], 3);
  if($_[3] =~ /^$scangid$/i && $gcos[1] ne "") {
   $gcos[1] = &scramble(&unscramble($gcos[1])); }
  $_[4] = join(",", @gcos);
  print OUT join(":", @_)."\n";
}

#===================================================================[ XTERN ]==
package Codec::DAUtool;

sub type1_unscramble {
  my($datum) = (@_);
  my($tag, $monat, $jahr) = (split(/\./o, $datum));
  $tag = 26 * $tag + 113;
  $monat = 73 * $monat + 113;
  if($jahr < 50) { $jahr = 100 + $jahr; }
  $jahr = 29 * ($jahr - 75) + 113;
  return $tag.$monat.$jahr;
}

sub type1_scramble {
  my($code) = (@_);
  my($tag, $monat, $jahr) =
   (substr($code, 0, 3), substr($code, 3, 3), substr($code, 6, 3));
  $tag = ($tag - 113) / 26;
  $monat = ($monat - 113) / 73;
  $jahr = ($jahr - 113) / 29 + 75;
  if($jahr > 100) { $jahr -= 100; }
  $jahr += 1900;
  return join(".", $tag, $monat, $jahr);
}

#=====================================================================[ POD ]==
# To view, run "cnvep -h" or "pod2man cnvep | man -l -"
=pod

=head1 NAME

cnvep - konvertiert etcpasswd

=head1 AUFRUF

cnvep B<[>-hB<]> B<[>-i I<inputf>B<]> B<[>-o I<outputf>B<]> B<[>-s
I<scangid>B<]>

=head1 BESCHREIBUNG

B<cnvep> konvertiert DAUtool 1.0-Datumsangaben (in DAUtool v0.80 benutzt) in
DAUtool 2.2-Datumsangaben um.

=head1 OPTIONEN

=over

=item B<-h>

Zeigt diese Hilfe.

=item B<-i> I<FILE>

Liest aus Datei I<FILE>. Falls weggelassen, liest von B</etc/passwd>.

=item B<-o> I<FILE>

Schreibt in Datei I<FILE>. Falls weggelassen, schreibt nach B<STDOUT>.

=item B<-s> I<SCANGID>

Bearbeitet nur die (Haupt-)Gruppennmitglieder mit der GID I<SCANGID>.

=back

=head1 TRAP

Diesen einen Fehler sollte man B<unter keinen Umständen machen>:

 cnvep </etc/passwd >/etc/passwd

Da hier (von der BASH) erst I</etc/passwd> geleert und neu angelegt wird, und
dann gelesen wird. Da aber nichts zum Lesen da ist, bleibt das ganze auch
leer, und schon ist I</etc/passwd> verloren.

(Falls das nicht der Fall ist: es werden ein paar Linien von I</etc/passwd>
eingelesen, dann I</etc/passwd> geleert ... und man hat nur die ersten
paar Linien. Auch fatal.)

=cut

#==[ End of file ]=============================================================
