#LyX 1.6.4.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding utf8
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks false
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref page
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine natbib_numerical
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 0
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Developer Documentation
\end_layout

\begin_layout Date
September 2009
\begin_inset space ~
\end_inset

--- Vitalnix 3.3
\end_layout

\begin_layout Standard
\noindent
This work (Developer Documentation) is made available under the Creative
 Commons Sharealike 3.0 License (CC-BY-SA).
 See 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://creativecommons.org/licenses/by-sa/3.0/
\end_layout

\end_inset

 for details.
\end_layout

\begin_layout Standard
\noindent

\series bold
Copyright Â© Jan Engelhardt <jengelh [at] medozas de>, 2009
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Components
\end_layout

\begin_layout Standard
Besides the main components from the Administrator Guide, the Developer
 Guide spans at least:
\end_layout

\begin_layout Itemize

\family sans
libvxcgi
\family default
 provides functions common to CGI processing, such as query parsing and
 splitting.
\end_layout

\begin_layout Itemize

\family sans
libvxcli
\family default
 has a few functions pertaining to interactive command-line usage, like
 prompt parsing.
\end_layout

\begin_layout Itemize

\family sans
libvxcore
\family default
 manages 
\begin_inset Quotes eld
\end_inset

modules
\begin_inset Quotes erd
\end_inset

, including database drivers, EDS format handlers, password list output
 formatting styles.
\end_layout

\begin_layout Itemize

\family sans
libvxeds
\family default
 is a library to parse various External Data Source (EDS) formats
\end_layout

\begin_layout Itemize

\family sans
libvxmdfmt
\family default
 deals with pretty-formatting password lists that have been generated by
 mass user addition.
\end_layout

\begin_layout Itemize

\family sans
libvxmdsync
\family default
 has the synchronization procedures when users from an EDS are sync'ed to
 the actual user database.
\end_layout

\begin_layout Itemize

\family sans
libvxutil
\family default
 keeps various utility functions such as password creation, password crypt
 hashing, UUID generation, and everything that did not land in another library.
\end_layout

\begin_layout Part
libvxdb
\end_layout

\begin_layout Section
Module handling
\end_layout

\begin_layout Subsection
Load and unload
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxdb/libvxdb.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
vxdb_load(
\series bold
const char *
\series default
name);
\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 vxdb_unload(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
state);
\end_layout

\begin_layout Standard

\family typewriter
vxdb_load
\family default
 does multiple things.
 First, it reads the master VXDB configuration file, 
\family typewriter
${
\family default
\shape italic
sysconfdir
\family typewriter
\shape default
}\SpecialChar \slash{}
libvxdb.conf
\family default
, to read some parameters (currently just one).
 The magic name 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 can be used to load the default database configuration (note difference
 between database driver and configuration), as defined in the configuration
 file.
 After resolving the name, it 
\family typewriter
dlopen
\family default
(3)s the actual database driver, which in turn may read its configuration
 file containing paths
\end_layout

\begin_layout Standard
One can pass the magic string 
\family typewriter
"*"
\family default
 for the 
\family typewriter
name
\family default
 parameter to specify the default database.
\end_layout

\begin_layout Subsection
Opening and closing the database
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxdb/libvxdb.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 vxdb_open(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
state, 
\series bold
long
\series default
 flags);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxdb_open
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 vxdb_close(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
state);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxdb_close
\end_layout

\end_inset


\end_layout

\begin_layout Section
Retrieval of entries
\end_layout

\begin_layout Subsection
Single retrieval of users
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxdb/libvxdb.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <vitalnix/libvxdb/xafunc.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 vxdb_getpwnam(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
handle, 
\series bold
const char *
\series default
username,
\begin_inset Newline newline
\end_inset

                  
\series bold
struct
\series default
 vxdb_user 
\series bold
*
\series default
result);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxdb_getpwnam
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 vxdb_getpwuid(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
handle, 
\series bold
const char *
\series default
username,
\begin_inset Newline newline
\end_inset

                  
\series bold
struct
\series default
 vxdb_user 
\series bold
*
\series default
result);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxdb_getpwuid
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Retrieves general information, such as login name, numeric UID, primary
 group, home directory, default shell, etc.
\begin_inset space \space{}
\end_inset

about the user given by username or UID.
 
\family typewriter
result
\family default
 should point to a valid 
\family typewriter
struct vxdb_state
\family default
, i.
\begin_inset space \thinspace{}
\end_inset

e.
\begin_inset space \space{}
\end_inset

it must have been zeroed or been filled before.
 See the example below.
\end_layout

\begin_layout Standard
On success, positive non-zero is returned.
 If the user was not found, zero is returned.
 On error, a negative value is returned, indicating the error.
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 vxdb_state user;
\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 ret;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

memset(&user, 0, 
\series bold
sizeof
\series default
(*user));
\begin_inset Newline newline
\end_inset


\series bold
if
\series default
 ((ret = vxdb_getpwnam(dbh, "jengelh", &user)) < 0)
\begin_inset Newline newline
\end_inset

        fprintf(stderr, "vxdb_getpwnam: %s
\backslash
n", strerror(-ret));
\begin_inset Newline newline
\end_inset


\series bold
else if
\series default
 (ret == 0)
\begin_inset Newline newline
\end_inset

        fprintf(stderr, "The user dose not exist
\backslash
n");
\begin_inset Newline newline
\end_inset


\series bold
else
\series default

\begin_inset Newline newline
\end_inset

        do_something();
\end_layout

\begin_layout Subsection
Single retrieval of groups
\end_layout

\begin_layout Subsection
Bulk retrieval
\end_layout

\begin_layout Section
User and group management
\end_layout

\begin_layout Subsection
Addition of a new user account
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxdb_useradd(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
state, 
\series bold
const struct
\series default
 vxdb_user 
\series bold
*
\series default
user);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxdb_useradd
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns 
\family typewriter
-EINVAL
\family default
 if the username is empty, or -EEXIST if the username already exists.
 It is implementation-defined whether the creation of accounts with non-unique
 UID is allowed.
 If forbidden, -EEXIST is returned too.
 vxdb_usermod
\end_layout

\begin_layout Standard
Returns -EINVAL if both username and uid in the search mask are empty, or
 returns -ENOENT if the user was not found.
 vxdb_userdel
\end_layout

\begin_layout Standard
Returns -EINVAL if both username and uid in the search mask are empty, or
 returns -ENOENT if the user was not found.
\end_layout

\begin_layout Subsection
Modification of user accounts
\end_layout

\begin_layout Subsection
Deletion of user accounts
\end_layout

\begin_layout Subsection
Addition of a group
\end_layout

\begin_layout Subsection
Modification of a group
\end_layout

\begin_layout Subsection
Deletion of a group
\end_layout

\begin_layout Section
Secondary group membership
\end_layout

\begin_layout Subsection
Joining a group
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxdb_sgmapadd(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
handle, 
\series bold
const char *
\series default
user,
\begin_inset Newline newline
\end_inset

                  
\series bold
const char *
\series default
group);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxdb_sgmapadd
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
vxdb_sgmapadd
\family default
 function is used to add a new secondary group mapping, that is, it will
 add the group to the user's list of secondary (or 
\begin_inset Quotes eld
\end_inset

supplementary
\begin_inset Quotes erd
\end_inset

) groups.
\end_layout

\begin_layout Standard
On success, positive non-zero is returned.
 On error, zero or a negative value is returned, indicating the error.
\end_layout

\begin_layout Description

\family typewriter
-ENOENT
\family default
 The user or the group does not exist.
\end_layout

\begin_layout Description

\family typewriter
-EEXIST
\family default
 The mapping already exists.
\end_layout

\begin_layout Description

\family typewriter
-EPERM
\family default
 Insufficient privileges to complete the operation.
\end_layout

\begin_layout Subsection
Leaving a group
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxdb_sgmapdel(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
handle, 
\series bold
const char *
\series default
user,
\begin_inset Newline newline
\end_inset

                  
\series bold
const char *
\series default
group);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxdb_sgmapdel
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
vxdb_sgmapdel
\family default
 function will remove the user from the specified secondary group.
\end_layout

\begin_layout Standard
On success, positive non-zero is returned.
 On error, zero or a negative value is returned, indicating the error.
\end_layout

\begin_layout Description

\family typewriter
-ENOENT
\family default
 The mapping does not exist.
\end_layout

\begin_layout Description

\family typewriter
-EPERM
\family default
 Insufficient privileges to complete the operation.
\end_layout

\begin_layout Subsection
Retrieval of secondary groups
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxdb_sgmapget(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
handle, 
\series bold
const char *
\series default
user,
\begin_inset Newline newline
\end_inset

                  
\series bold
char ***
\series default
result);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxdb_sgmapget
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
vxdb_sgmapget
\family default
 will retrieve the list of secondary (or 
\begin_inset Quotes eld
\end_inset

supplementary
\begin_inset Quotes erd
\end_inset

) groups the user is a member of.
 It will allocate an appropriately-sized 
\family typewriter
NULL
\family default
-terminated array and store it in 
\family typewriter
*result
\family default
 if the user has one or more groups.
 If the user has zero groups, or 
\family typewriter
NULL
\family default
 is passed for result, nothing will be allocated.
\end_layout

\begin_layout Standard
On success, the number of groups is returned, which may be zero or more.
 On error, a negative value is returned, indicating the error.
 When you are done with the data, each string in the array as well as the
 array itself should be freed; 
\family typewriter
HX_zvecfree
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HX_zvecfree
\end_layout

\end_inset

 can be used for this.
\end_layout

\begin_layout Description

\family typewriter
-ENOENT
\family default
 The user does not exist.
\end_layout

\begin_layout Description

\family typewriter
-ENOMEM
\family default
 Out of memory.
\end_layout

\begin_layout Description

\family typewriter
-EPERM
\family default
 Not enough privileges to complete this operation.
\end_layout

\begin_layout LyX-Code

\series bold
char **
\series default
groups, 
\series bold
**
\series default
g;
\begin_inset Newline newline
\end_inset


\series bold
if
\series default
 (vxdb_sgmapget(dbh, "jengelh", &groups) > 0) {
\begin_inset Newline newline
\end_inset

        
\series bold
for
\series default
 (g = groups; *g != NULL; ++g)
\begin_inset Newline newline
\end_inset

                printf("%s,", *g);
\begin_inset Newline newline
\end_inset

        HX_zvecfree(groups);
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Database drivers
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
libvxutil
\end_layout

\begin_layout Section
Password generation
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxutil/libvxutil.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 vxutil_genpw(
\series bold
char *
\series default
password, 
\series bold
int
\series default
 len, 
\series bold
unsigned int
\series default
 flags);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxutil_genpw
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Link with 
\family typewriter
-lvxutil
\family default
.
\end_layout

\begin_layout Standard

\family typewriter
vxutil_genpw
\family default
 will generate a random password according to the parameters in the 
\family typewriter
flags
\family default
 argument.
 
\family typewriter
len
\family default
 should denote the size of the buffer pointed to by 
\family typewriter
password
\family default
, so 
\family typewriter
len-1
\family default
 characters are produced.
 The following 
\begin_inset Quotes eld
\end_inset

characteristic-tuning
\begin_inset Quotes erd
\end_inset

 flags can be OR'ed in:
\end_layout

\begin_layout Description

\family typewriter
GENPW_1DIGIT
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
GENPW_1DIGIT
\end_layout

\end_inset

 Make sure there is at least one digit in the output.
\end_layout

\begin_layout Description

\family typewriter
GENPW_O1DIGIT
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
GENPW_O1DIGIT
\end_layout

\end_inset

 Allow digits to appear in the output password.
 If this flag is not present, no digits will ever be in the password.
 Whether there will be a digit or not depends on the random function.
\end_layout

\begin_layout Description

\family typewriter
GENPW_1CASE
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
GENPW_1CASE
\end_layout

\end_inset

 Make sure there is at least one uppercase character in the output.
\end_layout

\begin_layout Description

\family typewriter
GENPW_O1CASE
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
GENPW_O1CASE
\end_layout

\end_inset

 Allow uppercase characters to appear in the output.
 If this flag is not present, no uppercase characters will ever be in the
 password.
\end_layout

\begin_layout Standard
Exactly one of the algorithmic flags can be chosen, that is then OR'ed into
 the 
\family typewriter
flags
\family default
 argument:
\end_layout

\begin_layout Description

\family typewriter
GENPW_RAND
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
GENPW_RAND
\end_layout

\end_inset

 Generate a standard random password.
 This is the default.
\end_layout

\begin_layout Description

\family typewriter
GENPW_JP
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
GENPW_JP
\end_layout

\end_inset

 Generate a password from randomly chosen substrings from the JP table.
 See below for details.
\end_layout

\begin_layout Description

\family typewriter
GENPW_ZH
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
GENPW_ZH
\end_layout

\end_inset

 Generate a password from randomly chosen substrings from the ZH table.
 See below for details.
\end_layout

\begin_layout Subsection
Phonetic passwords
\end_layout

\begin_layout Standard
Because truly random passwords are harder to remember, Vitalnix comes with
 alternate algorithms that produce so-called phonetic passwords, that is,
 passwords that are random but more easily memorizable.
\end_layout

\begin_layout Subsubsection
JP table
\end_layout

\begin_layout Standard

\family typewriter
GENPW_JP
\family default
 will choose an algorithm which randomly picks strings from a table of Hepburn
 romanization strings of the Japanese base kana plus some voiced variants
 (e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset


\begin_inset Quotes eld
\end_inset

HA
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

BA
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

PA
\begin_inset Quotes erd
\end_inset

, but no combinations like 
\begin_inset Quotes eld
\end_inset

BYA
\begin_inset Quotes erd
\end_inset

).
 The JP table consists of only 69 strings, so provides a pool of easy syllables.
 A few minor tweaks are in place to avoid corner cases such as the same
 string twice in a row, or linguistical illegal constructs (e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset

starting with an original 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Subsubsection
ZH table
\end_layout

\begin_layout Standard

\family typewriter
GENPW_ZH
\family default
 will choose an algorithm which randomly picks strings from a reduced table
 of simplified Pinyin romanization strings of Chinese hanzi.
 Similarly sounding pairs have been squashed to minimize decision problems
 when a person is recollecting the password from phonetic memory.
 The ZH table is quite versatile with 381 strings, so if you think the passwords
 are too complex (run 
\family typewriter
vxrandpw
\family default
(1) to put you to a test), try going with the JP table instead.
\end_layout

\begin_layout Section
Password crypt hashing
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxutil/libvxutil.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
bool
\series default
 vxutil_phash(
\series bold
const char *
\series default
key, 
\series bold
const char *
\series default
salt, 
\series bold
unsigned int
\series default
 algorithm,
\begin_inset Newline newline
\end_inset

                  
\series bold
char **
\series default
result);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxutil_phash
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Link with 
\family typewriter
-lvxutil
\family default
.
\end_layout

\begin_layout Standard

\family typewriter
vxutil_phash
\family default
 is the password hashing/encryption function in Vitalnix.
\end_layout

\begin_layout Description

\family typewriter
key
\family default
 A password or any random string that is to be hashed/encrypted.
\end_layout

\begin_layout Description

\family typewriter
salt
\family default
 A random string used to perturb the algorithm in varying number of ways.
 Different algorithms require different salt strings.
 See below for details.
 
\family typewriter
salt
\family default
 may be 
\family typewriter
NULL
\family default
, in which case 
\family typewriter
vxutil_phash
\family default
 will generate a suitable random salt internally and use it.
\end_layout

\begin_layout Standard
The base64 character set is [
\family typewriter
./0-9A-Za-z
\family default
].
 While non-base64 characters in the salt work in Glibc's and Vitalnix's
 implementations, you should not rely on this behavior, especially because
 database backends (such as Shadow) put restrictions on what characters
 to use.
 Using non-base64 characters will yield undefined results and possibly corrupts
 your database or the hash when the hash is inserted into the DB.
\end_layout

\begin_layout Standard

\family typewriter
vxutil_phash
\family default
 returns a boolean, indicating either success or failure.
 On success, 
\family typewriter
*result
\family default
 is filled with a pointer to an allocated region of memory containing the
 hash, which you are supposed to free when you are done with it.
\end_layout

\begin_layout Standard
Failure may arise if the wanted algorithm is not available or a memory allocatio
n failure occurred.
 The contents of the 
\family typewriter
errno
\family default
 variable are undefined.
\end_layout

\begin_layout Subsection
Algorithm overview
\end_layout

\begin_layout Subsubsection
DES
\end_layout

\begin_layout Standard
DES crypt is selected using the 
\family typewriter
VXPHASH_DES
\family default
 constant for the algorithm argument.
 DES is a weak 56\SpecialChar \nobreakdash-
bit block cipher, and only the first eight characters of
 the key are used.
 The salt must be a two-character string from the base64 character set.
 Vitalnix relies on libc/libcrypt to provide the implementation of this
 algorithm, so it is not available, for example, under Microsoft Windows.
 Use of DES is discouraged anyway.
\end_layout

\begin_layout Subsubsection
MD5
\end_layout

\begin_layout Standard
MD5 hashing is selected using the 
\family typewriter
VXPHASH_MD5
\family default
 constant.
 Both the 
\family typewriter
key
\family default
 and 
\family typewriter
salt
\family default
 are (in full length, unlike DES) used to build the 128\SpecialChar \nobreakdash-
bit digest.
\end_layout

\begin_layout Standard
The salt consits of a ID prefix, the salt and optionally a dollar sign.
 The ID is the three-character string 
\begin_inset Quotes eld
\end_inset


\family typewriter
$1$
\family default

\begin_inset Quotes erd
\end_inset

, and the salt is a string of base64 characters with minimum length 0 and
 maximum length 8.
 It will automatically be truncated if it is longer than that.
 Valid salts would be, for example, 
\begin_inset Quotes eld
\end_inset


\family typewriter
$1$
\family default

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\family typewriter
$1$$
\family default

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\family typewriter
$1$ABC
\family default

\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset


\family typewriter
$1$longerthaneight$
\family default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Blowfish crypt
\end_layout

\begin_layout Standard
Blowfish crypt is selected using 
\family typewriter
VXPHASH_BLOWFISH
\family default
.
 It features a highly complex key schedule and its number of rounds is tunable,
 which makes it fit for the long-term use.
\end_layout

\begin_layout Standard
The salt consists of the ID prefix 
\begin_inset Quotes eld
\end_inset


\family typewriter
$2a$
\family default

\begin_inset Quotes erd
\end_inset

, a salt string of exactly 22 base64 characters and an optional dollar sign.
\end_layout

\begin_layout Subsubsection
NT4 hash
\end_layout

\begin_layout Standard
Windows NT hashing is selected using 
\family typewriter
VXPHASH_SMBNT
\family default
.
 The 
\family typewriter
salt
\family default
 argument is ignored.
 The NT4 hash is a simple 128\SpecialChar \-
bit MD4 digest of the key with a few static
 transformations without any salt perturbation, and hence is susceptible
 to dictionary and rainbow attacks.
 I discourage its use, though unfortunately, Windows clients rely on this.
\end_layout

\begin_layout Subsubsection
SHA-256 hash
\end_layout

\begin_layout Standard
The SHA family of password hashing has been introduced just recently (September
 2007) as a successor to the DES crypt and MD5 hash methods.
 It works similarly to the MD5 variant, but like Blowfish, the number of
 rounds can also be tuned.
\end_layout

\begin_layout Standard
The SHA-256 hash method can be selected using 
\family typewriter
VXPHASH_SHA256
\family default
.
 The salt string is made up of the ID 
\begin_inset Quotes eld
\end_inset


\family typewriter
$5$
\family default

\begin_inset Quotes erd
\end_inset

, an optional rounds parameter 
\begin_inset Quotes eld
\end_inset


\family typewriter
rounds=N$
\family default

\begin_inset Quotes erd
\end_inset

, up to 16 base64 characters and an optional dollar sign.
 The number of rounds, if provided, must be between 1,000 and 999,999,999
 (inclusive), though without the 1000s separator.
 If it exceeds these limits, the value will be clamped.
 A valid example: 
\family typewriter
$5$rounds=5000$abcdefghijklmnop$
\end_layout

\begin_layout Subsubsection
SHA-512 hash
\end_layout

\begin_layout Standard
The SHA-512 hash method can be selected using 
\family typewriter
VXPHASH_SHA512
\family default
.
 Its ID is 
\begin_inset Quotes eld
\end_inset


\family typewriter
$6$
\family default

\begin_inset Quotes erd
\end_inset

 and also allows a rounds parameter and uses 16 base64 characters.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout LyX-Code

\series bold
char *
\series default
result = NULL;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
if
\series default
 (vxutil_phash("password", "$2a$05$ABCDEFGHIJKLMNOPQRSTUV$",
\begin_inset Newline newline
\end_inset

    VXPHASH_BLOWFISH, &result)) {
\begin_inset Newline newline
\end_inset

        printf("%s
\backslash
n", result);
\begin_inset Newline newline
\end_inset

        free(result);
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Section
UUID management
\end_layout

\begin_layout Section
libvxutil other functions
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_azstr
\end_layout

\begin_layout LyX-Code

\series bold
char *
\series default
vxutil_azstr(
\series bold
const char *
\series default
string);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxutil_azstr
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
vxutil_azstr
\family default
 will return a pointer to a zero-length string if string is 
\family typewriter
NULL
\family default
, otherwise 
\family typewriter
string
\family default
.
 This essentially makes sure the returned pointer can always be dereferenced.
 Actual use for this function is somewhere between laziness and cleaner
 code, e.
\begin_inset space \thinspace{}
\end_inset

g.:
\end_layout

\begin_layout LyX-Code
strcmp(vxutil_azstr(foo), "bar") == 0
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_have_display
\end_layout

\begin_layout LyX-Code

\series bold
bool
\series default
 vxutil_have_display(
\series bold
void
\series default
);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxutil_have_display
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function can be used to determine if a graphical X
\begin_inset space ~
\end_inset

Windows environment is present by checking the 
\family typewriter
DISPLAY
\family default
 environment variable.
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_now_iday
\end_layout

\begin_layout LyX-Code

\series bold
unsigned int
\series default
 vxutil_now_iday(
\series bold
void
\series default
);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxutil_now_iday
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the current date measured in days from January 01 1970.
 This format is commonly used for password ageing monitoring.
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_only_digits
\end_layout

\begin_layout LyX-Code

\series bold
bool
\series default
 vxutil_only_digits(
\series bold
const char *
\series default
string);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxutil_only_digits
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns non-zero if there are only digits (as determined by 
\family typewriter
isdigit
\family default
) in the string.
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_propose_home
\end_layout

\begin_layout LyX-Code

\series bold
char *
\series default
vxutil_propose_home(
\series bold
char *
\series default
dest, 
\series bold
size_t
\series default
 size, 
\series bold
const char *
\series default
base,
\begin_inset Newline newline
\end_inset

                          
\series bold
const char *
\series default
username, 
\series bold
unsigned int
\series default
 level);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxutil_propose_home
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Generates a home directory path, whose exact structure is dependent on level.
 A larger level yields a deeper filesystem tree depth, but reduces the number
 of concurrent inodes within a directory (this reduces directory search
 time on legacy filesystems).
 Level 2 for example is used by SourceForge's public servers.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
/home/username
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
/home/u/username
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Level 2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
/home/u/us/username
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The result is put into 
\family typewriter
buf
\family default
.
 At most 
\family typewriter
size-1
\family default
 characters are written and the result is always 
\family typewriter
'
\backslash
0'
\family default
-terminated.
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_propose_lname
\end_layout

\begin_layout LyX-Code

\series bold
char *
\series default
vxutil_propose_lname(
\series bold
char *
\series default
dest, 
\series bold
size_t
\series default
 size, 
\series bold
const char *
\series default
surname,
\end_layout

\begin_layout LyX-Code
                           
\series bold
const char *
\series default
firstname);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxutil_propose_lname
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Creates a login name in the pattern of 
\begin_inset Quotes eld
\end_inset

FSSSSSS
\begin_inset Quotes erd
\end_inset

 out of a real-world name.
 
\family typewriter
surname
\family default
 can be 
\family typewriter
NULL
\family default
, while 
\family typewriter
firstname
\family default
 must not be 
\family typewriter
NULL
\family default
.
 The two strings must be UTF-8 encoded.
\end_layout

\begin_layout Standard
There is special handling if the surname has multiple parts
\begin_inset space ~
\end_inset

--- let's take 
\begin_inset Quotes eld
\end_inset

van der Wies
\begin_inset Quotes erd
\end_inset

 as a fictional example.
 In this case, we consider the last part as what we would like to have in
 the username.
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_quote
\end_layout

\begin_layout LyX-Code

\series bold
char *
\series default
vxutil_quote(
\series bold
const char *
\series default
src, 
\series bold
unsigned int
\series default
 type, 
\series bold
char **
\series default
free_me);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxutil_quote
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the string 
\family typewriter
src
\family default
 in its escaped form according to 
\family typewriter
type
\family default
.
 The function returns 
\family typewriter
NULL
\family default
 on error, or a pointer to the escaped string on success.
 If extra space was allocated, the pointer is stored in 
\family typewriter
*free_me
\family default
, which is to be freed after usage.
 If no quoting was done, because it was not needed, 
\family typewriter
*free_me
\family default
 is set to 
\family typewriter
NULL
\family default
.
 This allows you to use 
\family typewriter
free
\family default
(3) unconditionally:
\end_layout

\begin_layout LyX-Code

\series bold
char *
\series default
free_me, 
\series bold
*
\series default
p;
\begin_inset Newline newline
\end_inset

p = vxutil_quote("o'really?", VXQUOTE_SINGLE, &free_me);
\begin_inset Newline newline
\end_inset

printf("%s
\backslash
n", p);
\begin_inset Newline newline
\end_inset

free(free_me);
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_replace_run
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxutil_replace_run(
\series bold
const char *
\series default
command, 
\series bold
const struct
\series default
 HXformat_map 
\series bold
*
\series default
varmap);
\end_layout

\begin_layout Standard
Replaces every occurrence of a 
\family typewriter
%{}
\family default
-tag in the command string by the defined value from 
\family typewriter
varmap
\family default
, then runs the expanded command using 
\family typewriter
system
\family default
(3) and returns its status.
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_slurp_file
\end_layout

\begin_layout LyX-Code

\series bold
char *
\series default
vxutil_slurp_file(
\series bold
const char *
\series default
filename);
\end_layout

\begin_layout Standard
Reads in the file specified by 
\family typewriter
filename
\family default
 in whole and returns a pointer to the newly allocated memory area, which
 should be freed after usage.
 On error, 
\family typewriter
NULL
\family default
 is returned and 
\family typewriter
errno
\family default
 will be set accordingly with the error from libc.
 
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_string_iday
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxutil_string_iday(
\series bold
const char *
\series default
date);
\end_layout

\begin_layout Standard
Transforms the string pointed to by date, which is of either format of 
\begin_inset Quotes eld
\end_inset

DD.MM.YYYY
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

MM/DD/YYYY
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

YYYY-MM-DD
\begin_inset Quotes erd
\end_inset

 into an integer representing the days since January 01 1970.
 The function will return negative non-zero on (parsing) error.
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_string_xday
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxutil_string_xday(
\series bold
const char *
\series default
date);
\end_layout

\begin_layout Standard
Transforms the string pointed to by date, which is of either format of 
\begin_inset Quotes eld
\end_inset

DD.MM.YYYY
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

MM/DD/YYYY
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

YYYY-MM-DD
\begin_inset Quotes erd
\end_inset

 into a BCD-style encoded integer representing the date.
\end_layout

\begin_layout Subsubsection

\family typewriter
vxutil_valid_username
\end_layout

\begin_layout LyX-Code

\series bold
bool
\series default
 vxutil_valid_username(
\series bold
const char *
\series default
username);
\end_layout

\begin_layout Standard
Returns true if the username does not contain any illegal characters.
 Samba UNIX machine account names are also handled (and will be accepted
 if they are valid).
\end_layout

\begin_layout Subsubsection

\family typewriter
vxuuid_vx3
\end_layout

\begin_layout LyX-Code

\series bold
char *
\series default
vxuuid_vx3(
\series bold
const char *
\series default
full_name, 
\series bold
unsigned int
\series default
 xday);
\end_layout

\begin_layout Standard
Generate a UUID from the string 
\family typewriter
full_name
\family default
 and the integer 
\family typewriter
xday
\family default
.
 This is used for Data Sources which come without an UUID, so one is generated
 based on the <name, date> tuple we deem to be unique within the Data Source.
 Returns a pointer to the newly allocated string containing the UUID, or
 
\family typewriter
NULL
\family default
 on error.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
libvxcore
\end_layout

\begin_layout Standard

\family sans
libvxcore
\family default
 provides functions for the ultimate basic functions such as module registering
 and lookup functions for such.
\end_layout

\begin_layout Subsection
Function overview
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxcore/loader.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 vxcore_module_register(
\series bold
const char *
\series default
section, 
\series bold
const char *
\series default
name,
\begin_inset Newline newline
\end_inset

                           
\series bold
const void *
\series default
ptr);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxcore_module_register
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 vxcore_module_unregister(
\series bold
const char *
\series default
section, 
\series bold
const char *
\series default
name);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxcore_module_unregister
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 HXmap 
\series bold
*
\series default
vxcore_section_lookup(
\series bold
const char *
\series default
section);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxcore_section_lookup
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void *
\series default
vxcore_module_lookup(
\series bold
const char *
\series default
section, 
\series bold
const char *
\series default
name);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxcore_module_lookup
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\family typewriter
vxcore_module_register
\end_layout

\begin_layout Standard
Registers a module in section and stores the user-defined ptr for it, which
 can later be retrieved using the lookup functions described below.
 Returns an AEE code.
\end_layout

\begin_layout Subsubsection

\family typewriter
vxcore_module_unregister
\end_layout

\begin_layout Standard
Unregisters the module in section.
\end_layout

\begin_layout Subsubsection

\family typewriter
vxcore_section_lookup
\end_layout

\begin_layout Standard

\family typewriter
vxcore_section_lookup
\family default
 returns the tree associated with section, which can be used for traversal
 and finding out about registered modules belonging to this section.
 If the section does not exist, 
\family typewriter
NULL
\family default
 is returned.
\end_layout

\begin_layout Subsubsection

\family typewriter
vxcore_module_lookup
\end_layout

\begin_layout Standard

\family typewriter
vxcore_module_lookup
\family default
 returns the user-defined pointer for module in section.
 If the section does not exist or the module is not registered, 
\family typewriter
NULL
\family default
 is returned.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
libvxeds
\end_layout

\begin_layout Section
libvxeds
\end_layout

\begin_layout Standard

\family sans
libvxeds
\family default
 is the library for External Data Sources (EDS).
 It converts data sources of various input types to the internal 
\family typewriter
vxeds_entry
\family default
 structure used by libvxmdsync.
\end_layout

\begin_layout Subsection
Structures
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxeds/libvxeds.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 vxeds_entry {
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
struct vxeds_entry
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
username;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
first_name;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
surname;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
full_name;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
pvgrp;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
uuid;
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Description

\family typewriter
full_name
\family default
 concatenation of 
\family typewriter
first_name
\family default
 and 
\family typewriter
surname
\family default
.
\end_layout

\begin_layout Description

\family typewriter
pvgrp
\family default
 Private group descriptor.
\end_layout

\begin_layout Description

\family typewriter
uuid
\family default
 External unique user identifier.
\end_layout

\begin_layout Subsection

\family typewriter
vxeds_open
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxeds_open(
\series bold
const char *
\series default
id, 
\series bold
const char *
\series default
fmt, 
\series bold
void **
\series default
state);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxeds_open
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Open the data source identified by id.
 This is mostly a filename, but the exact interpretation depends on fmt.
 fmt must denote the type of the data source.
 state must be a pointer to a valid local variable (see example below) which
 is then later to be passed on subsequent vxeds_read() calls.
 Returns an AEE code; the following extra errors can happen:
\end_layout

\begin_layout Description

\family typewriter
-EINVAL
\family default
 No handler registered for the format given by 
\family typewriter
fmt
\family default
.
\end_layout

\begin_layout Description

\family typewriter
-ENOMEM
\family default
 Out of memory.
\end_layout

\begin_layout Subsection

\family typewriter
vxeds_read
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxeds_read(
\series bold
void *
\series default
state, 
\series bold
struct
\series default
 vxeds_entry 
\series bold
*
\series default
entry);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxeds_read
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Reads the next entry from the data source and returns it in normalized form
 in 
\family typewriter
entry
\family default
.
 The members of the 
\family typewriter
struct vxeds_entry
\family default
 are allocated (if a string), so they must be freed afterwards, preferably
 using the simple 
\family typewriter
vxeds_free_entry
\family default
.
 (Note: The username is constructed within libvxmdsync.)
\end_layout

\begin_layout Standard
Returns zero on EOF, positive non-zero on success, or negative non-zero
 for error.
 Most common is 
\family typewriter
-EINVAL
\family default
 if the parser has detected an incosistency in the data source.
 A parsing module is free to try to continue to read the data source after
 an inconsistency, or return zero on the call following the one that returned
 
\family typewriter
-EINVAL
\family default
.
 In other words, the return codes of repeated calls to 
\family typewriter
vxeds_read
\family default
 can look as follows:
\end_layout

\begin_layout Itemize
with recovery
\begin_inset space ~
\end_inset

--- 
\family typewriter
1 1 1 -EINVAL 1 1 0
\end_layout

\begin_layout Itemize
stop after incosistency
\begin_inset space ~
\end_inset

--- 
\family typewriter
1 1 1 -EINVAL 0
\end_layout

\begin_layout Subsection

\family typewriter
vxeds_close
\end_layout

\begin_layout LyX-Code

\series bold
void
\series default
 vxeds_close(
\series bold
void *
\series default
state);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxeds_close
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Close the data source associated with state.
\end_layout

\begin_layout Subsection

\family typewriter
vxeds_derivefromname
\end_layout

\begin_layout LyX-Code

\series bold
const char *
\series default
vxeds_derivefromname(
\series bold
const char *
\series default
filename);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxeds_derivefromname
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tries to figure out the filetype from the filename and returns a pointer
 to a string which could be passed as 
\family typewriter
fmt
\family default
 to 
\family typewriter
vxeds_open
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
vxeds_free_entry
\end_layout

\begin_layout LyX-Code

\series bold
void
\series default
 vxeds_free_entry(
\series bold
struct
\series default
 vxeds_entry 
\series bold
*
\series default
entry);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxeds_free_entry
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Frees all members of a 
\family typewriter
struct vxeds_entry
\family default
.
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 vxeds_entry e;
\begin_inset Newline newline
\end_inset


\series bold
void *
\series default
eds_state;
\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 ret;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
if
\series default
 ((ret = vxeds_open("20060101.xml", "xml", &eds_state)) <= 0)
\begin_inset Newline newline
\end_inset

        abort();
\begin_inset Newline newline
\end_inset


\series bold
while
\series default
 ((ret = vxeds_read(eds_state, &e) > 0) {
\begin_inset Newline newline
\end_inset

        do_something(&e);
\begin_inset Newline newline
\end_inset

        vxeds_free_entry(&e);
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset

vxeds_close(eds_state);
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
libvxmdfmt
\end_layout

\begin_layout Section
libvxmdfmt
\end_layout

\begin_layout Standard

\family sans
libvxmdfmt
\family default
 (and its frontend 
\family typewriter
vxpwlfmt
\family default
(8)) is used to beautify MDSYNC transaction logfiles (as generated by libvxmdsyn
c and frontends like 
\family typewriter
vxusersync
\family default
(8)) into nice, user-readable documents like HTML, RTF, Plain Text or others.
 It takes an input, an output, and optionally a style template file, as
 well as a so-called style name which describes what the beautified file
 looks like.
 (Those styles which do not take a style filename have their output hardcoded
 in the source code currently.) Please see the index for detailed descriptions
 of the available styles.
 
\end_layout

\begin_layout Subsection
Structures
\end_layout

\begin_layout Standard
Only the fields of interest are listed.
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxmdfmt/libvxmdfmt.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 pwlfmt_workspace {
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
struct pwlfmt_workspace
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
style_name;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
input_file;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
output_file;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
template_file;
\begin_inset Newline newline
\end_inset

        
\series bold
void (*
\series default
report
\series bold
)
\series default
(
\series bold
const struct
\series default
 pwlfmt_workspace 
\series bold
*
\series default
, 
\series bold
int
\series default
, 
\series bold
int
\series default
);
\begin_inset Newline newline
\end_inset

        ...
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Subsection

\family typewriter
pwlfmt_new
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 pwlfmt_new(
\series bold
struct
\series default
 pwlfmt_workspace 
\series bold
*
\series default
ws);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
pwlfmt_new
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Initializes the workspace and opens the files and style for I/O.
 Returns an AEE code.
\end_layout

\begin_layout Description

\family typewriter
PWLFMT_ENOSTYLE
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
PWLFMT_ENOSTYLE
\end_layout

\end_inset

 The specified style was not found.
\end_layout

\begin_layout Description

\family typewriter
PWLFMT_EREQTPL
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
PWLFMT_EREQTPL
\end_layout

\end_inset

 The style requires a template file, but no file has been specified.
\end_layout

\begin_layout Description

\family typewriter
PWLFMT_EEINPUT
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
PWLFMT_EEINPUT
\end_layout

\end_inset

 Could not open the input file.
 The exact error (e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset


\family typewriter
ENOENT
\family default
, etc.) is in 
\family typewriter
errno
\family default
.
\end_layout

\begin_layout Description

\family typewriter
PWLFMT_EEOUTPUT
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
PWLFMT_EEOUTPUT
\end_layout

\end_inset

 Could not open the output file.
 The exact error (e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset


\family typewriter
EPERM
\family default
, etc.) is in 
\family typewriter
errno
\family default
.
\end_layout

\begin_layout Description

\family typewriter
PWLFMT_EINPUTVER
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
PWLFMT_EINPUTVER
\end_layout

\end_inset

 The input file's format is not supported.
\end_layout

\begin_layout Subsubsection

\family typewriter
pwlfmt_process
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 pwlfmt_process(
\series bold
struct
\series default
 pwlfmt_workspace 
\series bold
*
\series default
ws);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
pwlfmt_process
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Starts the process by reading from the input stream, sorting the data and
 printing it out to the output stream.
 Returns an AEE code.
\end_layout

\begin_layout Subsection

\family typewriter
pwlfmt_strerror
\end_layout

\begin_layout LyX-Code

\series bold
const char *
\series default
pwlfmt_strerror(
\series bold
int
\series default
 errnum);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
pwlfmt_strerror
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
pwlfmt_strerror
\family default
 returns a string describing the error errnum.
 If 
\family typewriter
errnum
\family default
 is not an error code as returned by 
\family typewriter
pwlfmt_new
\family default
 or 
\family typewriter
pwlfmt_process
\family default
, this function will return 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
pwlstyles_trav
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxmdfmt/libvxmdfmt.h>
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <vitalnix/libvxmdfmt/vtable.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 pwlstyle_vtable 
\series bold
*
\series default
pwlstyles_trav(
\series bold
void **
\series default
trav);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
pwlstyles_trav
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Allows an application to traverse the list of available styles.
 
\family typewriter
*trav
\family default
 must be 
\family typewriter
NULL
\family default
 on the first call to 
\family typewriter
pwlstyles_trav
\family default
.
 The function returns a pointer to 
\family typewriter
struct pwlstyle_vtable
\family default
 for each style, which can then be examined for name, description and requiremen
t of a style.
 Returns 
\family typewriter
NULL
\family default
 when there are no more styles.
 
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 pwlfmt_workspace w = {
\begin_inset Newline newline
\end_inset

        .style_name = "pg_html",
\begin_inset Newline newline
\end_inset

        .input_file = "synclog-20060220-083226.log",
\begin_inset Newline newline
\end_inset

        .output_file = "synclog-20060220.html",
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 pwlstyle_vtable 
\series bold
*
\series default
table;
\begin_inset Newline newline
\end_inset


\series bold
void *
\series default
trav = 
\series bold
NULL
\series default
;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

pwlfmt_new(&w);
\begin_inset Newline newline
\end_inset


\series bold
while
\series default
 ((table = pwlstyles_trav(&trav)) != NULL)
\begin_inset Newline newline
\end_inset

        printf("%s: %s%s
\backslash
n", table->name, table->desc,
\begin_inset Newline newline
\end_inset

               table->require_template ? " (requires template)" : "");
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
libvxmdsync
\end_layout

\begin_layout Section
libvxmdsync
\end_layout

\begin_layout Standard
libvxmdsync contains the code for synchronizing the EDS user list to the
 system user database.
\end_layout

\begin_layout Subsection
Structures
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libvxmdsync/libvxmdsync.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 mdsync_config {
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 vxdb_user user_defaults;
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 new_pw_length, genpw_type, phash_type;
\begin_inset Newline newline
\end_inset

        
\series bold
int
\series default
 db_force_flush;
\begin_inset Newline newline
\end_inset

        
\series bold
long
\series default
 home_umask;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
skeleton_dir;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
master_preadd, 
\series bold
*
\series default
master_postadd;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
master_premod, 
\series bold
*
\series default
master_postmod;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
master_predel, 
\series bold
*
\series default
master_postdel;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
user_preadd, 
\series bold
*
\series default
user_postadd;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
user_premod, 
\series bold
*
\series default
user_postmod;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
user_predel, 
\series bold
*
\series default
user_postdel;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
home_base;
\begin_inset Newline newline
\end_inset

        
\series bold
long
\series default
 split_level;
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 mdsync_workspace {
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 mdsync_config config;
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
database;
\begin_inset Newline newline
\end_inset

        ...
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Subsection
Function overview
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libvxmdsync/libvxmdsync.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 mdsync_workspace 
\series bold
*
\series default
mdsync_init(
\series bold
void
\series default
);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
mdsync_init
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 mdsync_prepare_group(
\series bold
struct
\series default
 mdsync_workspace 
\series bold
*
\series default
ws, 
\series bold
const char *
\series default
group);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
mdsync_prepare_group
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 mdsync_read_file(
\series bold
struct
\series default
 mdsync_workspace 
\series bold
*
\series default
ws, 
\series bold
const char *
\series default
filename,
\begin_inset Newline newline
\end_inset

                     
\series bold
const char *
\series default
filetype);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
mdsync_read_file
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 mdsync_open_log(
\series bold
struct
\series default
 mdsync_workspace 
\series bold
*
\series default
ws, 
\series bold
const char *
\series default
filename);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
mdsync_open_log
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 mdsync_compare(
\series bold
struct
\series default
 mdsync_workspace 
\series bold
*
\series default
ws);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
mdsync_compare
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 mdsync_compare_simple(
\series bold
struct
\series default
 mdsync_workspace 
\series bold
*
\series default
ws);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
mdsync_compare_simple
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 mdsync_fixup(
\series bold
struct
\series default
 mdsync_workspace 
\series bold
*
\series default
ws);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
mdsync_fixup
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 mdsync_add(
\series bold
struct
\series default
 mdsync_workspace 
\series bold
*
\series default
ws);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
mdsync_add
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 mdsync_upd(
\series bold
struct
\series default
 mdsync_workspace 
\series bold
*
\series default
ws);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
mdsync_upd
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 mdsync_del(
\series bold
struct
\series default
 mdsync_workspace 
\series bold
*
\series default
ws);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
mdsync_del
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
void
\series default
 mdsync_free(
\series bold
struct
\series default
 mdsync_workspace 
\series bold
*
\series default
ws);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
mdsync_free
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
mdsync_compare
\end_layout

\begin_layout Standard
Compares 
\family typewriter
ws->add_req
\family default
 to the system user database.
 Users which are both in 
\family typewriter
ws->add_req
\family default
 and the VXDB are moved from 
\family typewriter
ws->add_req
\family default
 to 
\family typewriter
ws->keep_req
\family default
.
\end_layout

\begin_layout Standard
If deferred deletion is not configured, puts users, which have been removed
 from the EDS, but still exist in the VXDB, into 
\family typewriter
ws->delete_now
\family default
.
\end_layout

\begin_layout Standard
If deferred deletion is active, puts users, which do not exist on the EDS
 anymore, into 
\family typewriter
ws->defer_*
\family default
 depending on their deferred deletion status.
\end_layout

\begin_layout Standard
Puts all currently used usernames into 
\family typewriter
ws->lnlist
\family default
, including those that will be deleted, so usernames do not get reused right
 away.
\end_layout

\begin_layout Subsection

\family typewriter
mdsync_compare_simple
\end_layout

\begin_layout Standard
Puts all usernames from the VXDB into 
\family typewriter
ws->lnlist
\family default
.
 This is used for single-user adds, where deletion lists are not needed
 at all.
\end_layout

\begin_layout Subsection

\family typewriter
mdsync_fixup
\end_layout

\begin_layout Standard
Weeds out any double usernames in 
\family typewriter
ws->add_req
\family default
 for new users by appending an appropriate index number to their username,
 necessarily truncating the name.
 For example, if there already was a user with the login name 
\begin_inset Quotes eld
\end_inset

jengelh
\begin_inset Quotes erd
\end_inset

, another one would get 
\begin_inset Quotes eld
\end_inset

jengelh1
\begin_inset Quotes erd
\end_inset

, the next 
\begin_inset Quotes eld
\end_inset

jengelh2
\begin_inset Quotes erd
\end_inset

, etc.
 The maximum characters for a username is hardcoded in libvxmdsync to eight
 chars (do not change it), making the truncation pattern look like this
 in the presence of excess users: 
\begin_inset Quotes eld
\end_inset

jengel10
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

jenge100
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

jeng1000
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection

\family typewriter
mdsync_init
\end_layout

\begin_layout Subsection
Order
\end_layout

\begin_layout Standard
The synchronization process is divided into a number of functions to facilitate
 error processing and arguments needed to pass in at once (the 
\family typewriter
struct mdsync_workspace
\family default
 is already big).
 The exact order of calls to be made is:
\end_layout

\begin_layout Enumerate

\family typewriter
mdsync_init
\end_layout

\begin_layout Enumerate

\family typewriter
mdsync_prepare_group
\end_layout

\begin_layout Enumerate

\family typewriter
mdsync_read_file
\end_layout

\begin_layout Enumerate

\family typewriter
mdsync_open_log
\end_layout

\begin_layout Enumerate
Exactly one of:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
mdsync_compare
\end_layout

\begin_layout Itemize

\family typewriter
mdsync_compare_simple
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
mdsync_fixup
\end_layout

\begin_layout Enumerate
One or more of the following:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
mdsync_add
\end_layout

\begin_layout Itemize

\family typewriter
mdsync_upd
\end_layout

\begin_layout Itemize

\family typewriter
mdsync_del
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
mdsync_free
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
libvxcgi
\end_layout

\begin_layout Standard
The libvxcgi library provides functions commonly used in CGI environments.
\end_layout

\begin_layout Section
Authentication
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxcgi/libvxcgi.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 vxcgi_authenticate(
\series bold
const char *
\series default
user, 
\series bold
const char *
\series default
password);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxcgi_authenticate
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Authenticate the user using the given password.
 Returns an AEE code, carrying the PAM error code as a negative return value.
 (E.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset

-7 for 
\family typewriter
PAM_\SpecialChar \-
AUTH_\SpecialChar \-
ERR
\family default
 and -10 for 
\family typewriter
PAM_\SpecialChar \-
USER_\SpecialChar \-
UNKNOWN
\family default
.) 
\end_layout

\begin_layout Section
Query parsing
\end_layout

\begin_layout Subsection

\family typewriter
vxcgi_read_data
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxcgi/libvxcgi.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
vxcgi_read_data(
\series bold
int
\series default
 argc, 
\series bold
const char **
\series default
argv);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxcgi_read_data
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns the CGI POST data, or in case of a GET query, the query string.
 If called from the command-line, that is, if 
\family typewriter
getenv("REQUEST_METHOD") == NULL
\family default
, a copy of 
\family typewriter
argv[1]
\family default
 is returned, which is assumed to be in application/x-www-form-urlencoded
 encoding.
 Note that the returned string is allocated and therefore must be freed
 at a later time.
\end_layout

\begin_layout Standard
If you do not intend to pass any argc/argv, call 
\family typewriter
vxcgi_read_data
\family default
 with (
\family typewriter
0, NULL
\family default
).
\end_layout

\begin_layout Subsection

\family typewriter
vxcgi_split
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxcgi/libvxcgi.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct HXmap *
\series default
vxcgi_split(
\series bold
char *
\series default
str);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxcgi_split
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
vxcgi_split
\family default
 splits the string according to application/x-www-form-urlencoded rules
 and returns the key-value pairs in a 
\family typewriter
struct HXmap
\family default
.
 The string must be writable, as it will be modified and freed.
 The caller should preferably duplicate it beforehand.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
Here is how to quickly get a HXmap out of the query string:
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 HXmap 
\series bold
*
\series default
data = vxcgi_split(vxcgi_read_data(argc, argv));
\end_layout

\begin_layout Standard
and to get the 
\begin_inset Quotes eld
\end_inset

user
\begin_inset Quotes erd
\end_inset

 parameter if the query string:
\end_layout

\begin_layout LyX-Code

\series bold
char *
\series default
u = HXmap_get(data, "user");
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
libvxcli
\end_layout

\begin_layout Section
libvxcli
\end_layout

\begin_layout Standard
The 
\family sans
libvxcli
\family default
 library provides a few common functions for the command-line (CLI) variants
 of various programs included.
\end_layout

\begin_layout Subsection
Structures
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxcli/libvxcli.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 vxcq_entry {
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
struct vxcq_entry
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

        
\series bold
const char *
\series default
msg;
\begin_inset Newline newline
\end_inset

        
\series bold
const char *
\series default
prompt;
\begin_inset Newline newline
\end_inset

        
\series bold
const char *
\series default
defl;
\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 type;
\begin_inset Newline newline
\end_inset

        
\series bold
unsigned int
\series default
 flags;
\begin_inset Newline newline
\end_inset

        
\series bold
void *
\series default
ptr;
\begin_inset Newline newline
\end_inset

        
\series bold
int (*
\series default
validate
\series bold
)
\series default
(
\series bold
const struct
\series default
 vxcq_entry 
\series bold
*
\series default
);
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Standard

\family typewriter
struct vxcq_entry
\family default
 is used to query a vector of questions.
\end_layout

\begin_layout Description

\family typewriter
msg
\family default
 The tooltip string to be printed, e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset


\begin_inset Quotes eld
\end_inset

Enter a file which contains...
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Description

\family typewriter
prompt
\family default
 A prompt string, e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset


\begin_inset Quotes eld
\end_inset

Filename
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
defl
\family default
 Default answer, if any.
\end_layout

\begin_layout Description

\family typewriter
type
\family default
 The type of object pointed to by 
\family typewriter
ptr
\family default
.
 Can be either of 
\family typewriter
HXTYPE_STRING
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_STRING
\end_layout

\end_inset

, 
\family typewriter
HXTYPE_INT
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_INT
\end_layout

\end_inset

, 
\family typewriter
HXTYPE_LONG
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_LONG
\end_layout

\end_inset

 or 
\family typewriter
HXTYPE_DOUBLE
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
HXTYPE_DOUBLE
\end_layout

\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
flags
\family default
 A bitmask of 
\family typewriter
CQ_ABORT
\family default
 and/or 
\family typewriter
CQ_EMPTY
\family default
 (see below for details).
 You can specify 
\family typewriter
CQ_NONE
\family default
 for convenience in favor of 0.
\end_layout

\begin_layout Description

\family typewriter
ptr
\family default
 A pointer to where the answer should be stored
\end_layout

\begin_layout Description

\family typewriter
validate
\family default
 a function that will be called (if non-NULL) to validate the user input.
 The question is asked again if validation returns zero
\end_layout

\begin_layout Standard
All pointers can be 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Description

\family typewriter
VXCQ_TABLE_END
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
VXCQ_TABLE_END
\end_layout

\end_inset


\family default
 A macro that should be used as a sentinel to a 
\family typewriter
struct vxcq_entry
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
vxcli_query
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <vitalnix/libvxcli/libvxcli.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
char *
\series default
vxcli_query(
\series bold
const char *
\series default
msg, 
\series bold
const char *
\series default
prompt, 
\series bold
const char *
\series default
defl,
\begin_inset Newline newline
\end_inset

                  
\series bold
unsigned int
\series default
 flags, 
\series bold
char *
\series default
buf, 
\series bold
unsigned int
\series default
 size);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxcli_query
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Prints a message, a prompt and the default answer (
\family typewriter
msg
\family default
, 
\family typewriter
prompt
\family default
 and 
\family typewriter
defl
\family default
, respectively) and awaits input from stdin.
 
\family typewriter
flags
\family default
 is a bitmask that can contain:
\end_layout

\begin_layout Description

\family typewriter
VXCQ_ABORT
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
VXCQ_ABORT
\end_layout

\end_inset

 If the input consists of a single ^A control character, the dialog is aborted.
\end_layout

\begin_layout Description

\family typewriter
VXCQ_EMPTY
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
VXCQ_EMPTY
\end_layout

\end_inset

 If the input consists of a single ^E control character, the answer is seen
 as empty.
 This is so that a truly empty answer (string length being zero) can be
 used for the default answer.
\end_layout

\begin_layout Description

\family typewriter
VXCQ_ZNULL
\family default

\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
VXCQ_ZNULL
\end_layout

\end_inset

 If the answer is empty, 
\family typewriter
*ptr
\family default
 will be assigned 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Standard
If 
\family typewriter
buf
\family default
 is not 
\family typewriter
NULL
\family default
, the result is put into 
\family typewriter
buf
\family default
, writing at most 
\family typewriter
size-1
\family default
 characters plus a '
\family typewriter

\backslash
0
\family default
' character.
 
\family typewriter
buf
\family default
 is returned.
 If however, 
\family typewriter
buf
\family default
 is 
\family typewriter
NULL
\family default
, the 
\family typewriter
size
\family default
 paramter is ignored and a dynamic-size 
\family typewriter
hxmc_t
\family default
 container is returned.
 If the dialog was aborted, 
\family typewriter
NULL
\family default
 is returned.
\end_layout

\begin_layout Subsection

\family typewriter
vxcli_query_v
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 <libvxcli/libvxcli.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
unsigned int
\series default
 vxcli_query_v(
\series bold
const struct
\series default
 vxcq_entry 
\series bold
*
\series default
table);
\begin_inset Index
status open

\begin_layout Plain Layout

\family typewriter
vxcli_query_v
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Queries a vector of questions.
 It takes an array of 
\family typewriter
struct vxcq_entry
\family default
s and stores the results of each query in their respective 
\family typewriter
ptr
\family default
s.
 For strings, this will always create a 
\family typewriter
hxmc_t
\family default
 object.
 See example below for details.
 After each question, the 
\family typewriter
validate
\family default
 function is invoked to see if the input is valid; if not, the query is
 repeated.
\end_layout

\begin_layout Standard
Returns the number of successfully answered questions.
 Example:
\end_layout

\begin_layout LyX-Code

\series bold
static int
\series default
 ymd_validate(
\series bold
const char *
\series default
s)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 isdigit(s[0]) && isdigit(s[1]) && s[2] == '-' &&
\begin_inset Newline newline
\end_inset

               isdigit(s[3]) && isdigit(s[4]) && s[5] == '-' &&
\begin_inset Newline newline
\end_inset

               isdigit(s[6]) && isdigit(s[7]) &&
\begin_inset Newline newline
\end_inset

               isdigit(s[8]) && isdigit(s[9]);
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

hxmc_t 
\series bold
*
\series default
today_date = NULL;
\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 vxcq_entry tbl
\series bold
[]
\series default
 = {
\begin_inset Newline newline
\end_inset

        {
\begin_inset Newline newline
\end_inset

                .msg      = "Enter today's date",
\begin_inset Newline newline
\end_inset

                .defl     = "2006-03-04",
\begin_inset Newline newline
\end_inset

                .prompt   = "YYYY-MM-DD",
\begin_inset Newline newline
\end_inset

                .type     = HXTYPE_STRING,
\begin_inset Newline newline
\end_inset

                .ptr      = &today_date,
\begin_inset Newline newline
\end_inset

                .flags    = CQ_ABORT,
\begin_inset Newline newline
\end_inset

                .validate = ymd_validate,
\begin_inset Newline newline
\end_inset

        },
\begin_inset Newline newline
\end_inset

        VXCQ_TABLE_END,
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset

vxcli_query_v(tbl);
\end_layout

\begin_layout Standard
Which would show up as:
\end_layout

\begin_layout LyX-Code
Enter today's date
\begin_inset Newline newline
\end_inset

(Use <CTRL+A>,<Enter> to abort)
\begin_inset Newline newline
\end_inset

YYYY-MM-DD [2006-03-04] > 
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Part
Database modules
\end_layout

\begin_layout Section
Database modules
\end_layout

\begin_layout Subsection
Module definition
\end_layout

\begin_layout Standard
Each module must define a 
\family typewriter
struct vxdb_driver
\family default
 in which they set the function pointers to the respective functions.
 The module structure also includes space for name, author and description
 of the module for display with the vxdbinfo utility.
 A reduced example definition could look like this:
\end_layout

\begin_layout LyX-Code

\series bold
#include
\series default
 "drivers/static-build.h"
\begin_inset Newline newline
\end_inset


\series bold
#include
\series default
 <vitalnix/libvxdb/libvxdb.h>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
static struct
\series default
 vxdb_driver THIS_MODULE = {
\begin_inset Newline newline
\end_inset

        .name      = "Our sample module",
\begin_inset Newline newline
\end_inset

        .userinfo  = our_userinfo,
\begin_inset Newline newline
\end_inset

        .groupinfo = our_groupinfo,
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout LyX-Code
REGISTER_MODULE(our, &THIS_MODULE);
\end_layout

\begin_layout Standard
The 
\family typewriter
drivers/static-build.h
\family default
 include causes the 
\family typewriter
REGISTER_MODULE
\family default
 macro expands to extra code required for initializion.
\end_layout

\begin_layout Standard
Then of course, the module needs to provide the functions we have just specified
 in the sturct.
 They can then be called from user programs using the 
\family typewriter
vxdb_*
\family default
 functions and the respective instance as obtained from 
\family typewriter
vxdb_load
\family default
.
 Note that the struct must be writable since it will be modified.
\end_layout

\begin_layout Subsection
Initialization
\end_layout

\begin_layout LyX-Code

\series bold
int (*
\series default
init
\series bold
)
\series default
(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
mip, 
\series bold
const char *
\series default
config_file);
\end_layout

\begin_layout Standard
The 
\family typewriter
init
\family default
 function gets called after the shared library has been opened through 
\family typewriter
vxdb_load
\family default
 from the caller program.
 The driver loader passes the 
\family typewriter
config_file
\family default
 argument which indicates the location of the configuration file that is
 used.
\end_layout

\begin_layout Standard
In this function, the module should allocate its state and read configuration
 files.
 The allocation of a state might look like below, and must be done correctly
 to support reentrancy:
\end_layout

\begin_layout LyX-Code

\series bold
static int
\series default
 our_init(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
mip, 
\series bold
void *
\series default
priv)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 our_state 
\series bold
*
\series default
state;
\begin_inset Newline newline
\end_inset

        state = mip->state = malloc(
\series bold
sizeof
\series default
(
\series bold
struct
\series default
 our_state));
\begin_inset Newline newline
\end_inset

        state->config = read_some_config("bla.conf");
\begin_inset Newline newline
\end_inset

        read_some_extras(priv);
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 1;
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Standard
This is a very basic example, and you should look at the already existing
 modules to see what they do, and possibly how they do it.
\end_layout

\begin_layout Subsection
Opening the database
\end_layout

\begin_layout LyX-Code

\series bold
int (*
\series default
open
\series bold
)
\series default
(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
mip, 
\series bold
long
\series default
 flags);
\end_layout

\begin_layout Standard
The 
\family typewriter
open
\family default
 function should open a connection to the password database (if applicable),
 or do whatever is equivalent to prepare further actions.
 The 
\family typewriter
flags
\family default
 parameter is explained in the libvxdb API.
 Some sample code:
\end_layout

\begin_layout LyX-Code

\series bold
static int
\series default
 our_open(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
mip, 
\series bold
long
\series default
 flags)
\begin_inset Newline newline
\end_inset

{
\begin_inset Newline newline
\end_inset

        
\series bold
struct
\series default
 our_state 
\series bold
*
\series default
state = mip->state;
\begin_inset Newline newline
\end_inset

        
\series bold
if
\series default
 ((state->fp = fopen("/etc/passwd", "r")) == NULL)
\begin_inset Newline newline
\end_inset

                
\series bold
return
\series default
 -errno;
\begin_inset Newline newline
\end_inset

        
\series bold
return
\series default
 1;
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Subsection
Close of the database
\end_layout

\begin_layout LyX-Code

\series bold
void (*
\series default
close
\series bold
)
\series default
(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
mip);
\end_layout

\begin_layout Subsection
Unload
\end_layout

\begin_layout LyX-Code

\series bold
void (*
\series default
exit
\series bold
)
\series default
(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
mip);
\end_layout

\begin_layout Subsection
Module control
\end_layout

\begin_layout LyX-Code

\series bold
long (*
\series default
modctl
\series bold
)
\series default
(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
mip, 
\series bold
long
\series default
 command, 
\series bold
...
\series default
);
\end_layout

\begin_layout Standard
The driver can be controlled via the 
\family typewriter
vxdb_modctl
\family default
 function.
 (The idea is analogous to a device driver's 
\family typewriter
ioctl
\family default
(2).) There are some requests defined in libvxdb.h.
\end_layout

\begin_layout Itemize

\family typewriter
vxdb_modctl(struct vxdb_state *mp, VXDB_FLUSH);
\family default

\begin_inset Newline newline
\end_inset

Causes any changes to be committed to the underlying layer.
\end_layout

\begin_layout Itemize

\family typewriter
vxdb_modctl(struct vxdb_state *mp, VXDB_NEXTUID_SYS);
\family default

\begin_inset Newline newline
\end_inset

Returns the next free auto-UID below 
\family typewriter
UID_MIN
\end_layout

\begin_layout Itemize

\family typewriter
vxdb_modctl(struct vxdb_state *mp, VXDB_NEXTUID);
\family default

\begin_inset Newline newline
\end_inset

Returns the next free auto-UID within 
\family typewriter
UID_MIN
\family default
 and 
\family typewriter
UID_MAX
\end_layout

\begin_layout Itemize

\family typewriter
vxdb_modctl(struct vxdb_state *mp, VXDB_NEXTGID_SYS);
\family default

\begin_inset Newline newline
\end_inset

SYS Returns the next free auto-GID below 
\family typewriter
GID_MIN
\end_layout

\begin_layout Itemize

\family typewriter
vxdb_modctl(struct vxdb_state *mp, VXDB_NEXTGID);
\family default

\begin_inset Newline newline
\end_inset

Returns the next free auto-GID within 
\family typewriter
GID_MIN
\family default
 and 
\family typewriter
GID_MAX
\end_layout

\begin_layout Subsection
Locking
\end_layout

\begin_layout LyX-Code

\series bold
int (*
\series default
lock
\series bold
)
\series default
(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
mip);
\begin_inset Newline newline
\end_inset


\series bold
int (*
\series default
unlock
\series bold
)
\series default
(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
mip);
\end_layout

\begin_layout Subsection
Description
\end_layout

\begin_layout Standard
Since there is a great variety of user databases, the Vitalnix Unified Account
 Database (VXDB) provides a generic API to any application.
 Some user databases are for example the Shadow Password System (
\family typewriter
/etc/passwd
\family default
 etc.).
 Another could be the Samba userdb in 
\family typewriter
/var/lib/samba
\family default
, or OpenLDAP (libldap).
\end_layout

\begin_layout Subsection
Notes
\end_layout

\begin_layout Standard
Depending on how the user database is organized, you might want, or even
 need to read it into memory (=
\begin_inset space ~
\end_inset

cache it).
 Be sure to keep a lock on the database and/or files when writing, if necessary,
 to not run into race conditions.
 Unprivileged access that cannot write does not need any write locking.
 Doing the I/O on our own (and even caching if the module author wants to)
 can result in a faster execution, and allows for way more control.
 
\begin_inset Quotes eld
\end_inset

Pipe modules
\begin_inset Quotes erd
\end_inset

, which just transfer data, as it would be with a LDAP or MySQL database,
 do not need to do any direct file I/O, since the underlying DB will handle
 that.
\end_layout

\begin_layout Standard
It is not specified whether and how the back-end module and/or the user
 database can handle accounts with non-unique UIDs (e.
\begin_inset space \thinspace{}
\end_inset

g.
\begin_inset space \space{}
\end_inset

to implement an old-style multi-superuser system).
 However, it should be handled gracefully, i.
\begin_inset space \thinspace{}
\end_inset

e.
\begin_inset space \space{}
\end_inset

either allow it in a manageable way or return an appropriate error code.
\end_layout

\begin_layout Standard
The module may or may not allow opening the user database twice (the module
 may be opened by different applications).
 You should handle that case then.
 One, locking files, and two, checking for the lock is the usual thing for
 a module to be opened only once at a time.
\end_layout

\begin_layout Standard
Upon success, returns >0, otherwise return 0 (and possibly set 
\family typewriter
errno
\family default
), or even return 
\family typewriter
-errno
\family default
 and set 
\family typewriter
errno
\family default
 to signalize a hard error (i.
\begin_inset space \thinspace{}
\end_inset

e.
\begin_inset space \space{}
\end_inset


\family typewriter
ENOMEM
\family default
 due to 
\family typewriter
malloc
\family default
(3)).
\end_layout

\begin_layout Standard

\family typewriter
b_close
\family default
 shall deinitialize the currently open session for the user database.
 Flush any data to disk if needed and free up all memory used for the session.
\end_layout

\begin_layout Standard

\family typewriter
exit
\family default
 is the counterpart of 
\family typewriter
b_init
\family default
 and is called through 
\family typewriter
vxdb_unload
\family default
.
 This function also does not necessarily need to exist either.
\end_layout

\begin_layout Subsection
Traversing the user and group lists
\end_layout

\begin_layout LyX-Code
int vxdb_usertrav(void *state, struct vxdb_user *result); int vxdb_grouptrav(voi
d *state, struct vxdb_group *result);
\end_layout

\begin_layout Standard
The vxdb_[ug]entry structs are as follows:
\end_layout

\begin_layout LyX-Code

\series bold
struct
\series default
 vxdb_user {
\begin_inset Newline newline
\end_inset

        
\family roman
\shape italic
/* passwd part */
\family default
\shape default

\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
lname;
\begin_inset Newline newline
\end_inset

        
\series bold
long
\series default
 uid, gid;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
gecos, 
\series bold
*
\series default
home, 
\series bold
*
\series default
shell, 
\series bold
*
\series default
igrp, 
\series bold
*
\series default
sgrp;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

        
\family roman
\shape italic
/* shadow part */
\family default
\shape default

\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
pass, 
\series bold
*
\series default
pass_cryp;
\begin_inset Newline newline
\end_inset

        
\series bold
long
\series default
 last_change, keep_min, keep_max, warn_age, expire, inactive;
\begin_inset Newline newline
\end_inset

};
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
struct
\series default
 vxdb_group {
\begin_inset Newline newline
\end_inset

        
\series bold
long
\series default
 gid;
\begin_inset Newline newline
\end_inset

        
\series bold
char *
\series default
gname;
\begin_inset Newline newline
\end_inset

};
\end_layout

\begin_layout Standard
Analogous to 
\family typewriter
getpwent
\family default
, just a bit more organized, is the 
\family typewriter
b_usertrav
\family default
 function.
 It takes the usual state pointer and a 
\family typewriter
struct vxdb_user
\begin_inset space ~
\end_inset

*
\family default
 pointer.
 When calling 
\family typewriter
b_usertrav
\family default
, it takes the next user found in the database and fills in the struct.
\end_layout

\begin_layout Standard
All the 
\family typewriter
char
\begin_inset space ~
\end_inset

*
\family default
 fields in the structs shall point to allocated memory (or memory available
 throughout the program), so do not use local variables or 
\family typewriter
alloca
\family default
.
 
\family typewriter
strdup
\family default
 or similar might help you.
 Those strings may not be changed by anything else than the driver module,
 they are meant to be read-only.
 That way, these strings can be reused anywhere.
\end_layout

\begin_layout Standard
For each successful returned user via 
\family typewriter
b_usertrav
\family default
, the function shall return >0 (usually 1 suffices).
 The order of users is of no importance; if necessary, the application itself
 will need to sort it.
 If the end of the list is reached, return 0, or, if an error occurred,
 set 
\family typewriter
errno
\family default
 and return 
\family typewriter
-errno
\family default
.
 When the end of the list is reached, 
\family typewriter
b_usertrav
\family default
 can be called with the result parameter set to 
\family typewriter
NULL
\family default
 to reset the list traverser.
\end_layout

\begin_layout Standard
Similar applies to the group traversing function 
\family typewriter
b_grouptrav
\family default
.
\end_layout

\begin_layout Standard
The traversion pointer is not static but stored in the state.
\end_layout

\begin_layout Subsection
Retrieve info about a user or group
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxdb_userinfo(
\series bold
void *
\series default
state, 
\series bold
struct
\series default
 vxdb_user 
\series bold
*
\series default
req, 
\series bold
struct
\series default
 vxdb_user 
\series bold
*
\series default
dest,
\begin_inset Newline newline
\end_inset

                  
\series bold
size_t
\series default
 s);
\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 vxdb_groupinfo(
\series bold
void *
\series default
state, 
\series bold
struct
\series default
 vxdb_group 
\series bold
*
\series default
req,
\begin_inset Newline newline
\end_inset

                   
\series bold
struct
\series default
 vxdb_group 
\series bold
*
\series default
dest, 
\series bold
size_t
\series default
 s);
\end_layout

\begin_layout Standard

\family typewriter
b_userinfo
\family default
 walks down the list of users searching for matching users.
 The contents of req are compared with every user in the list.
 If a value in 
\family typewriter
req
\family default
 is 
\family typewriter
-1
\family default
 or 
\family typewriter
NULL
\family default
 (depending on the member type and meaning), it is ignored and not included
 in the comparison, so you could do i.e.
 the following searches:
\end_layout

\begin_layout Itemize
any user with UID 37007
\begin_inset Newline newline
\end_inset


\family typewriter
(req->lname == NULL && req->uid == 37007)
\end_layout

\begin_layout Itemize
user 
\begin_inset Quotes eld
\end_inset

guest
\begin_inset Quotes erd
\end_inset

, any UID
\begin_inset Newline newline
\end_inset


\family typewriter
(strcmp(req->lname, "guest") == 0 && req->uid == -1)
\end_layout

\begin_layout Itemize
user 
\begin_inset Quotes eld
\end_inset

guest
\begin_inset Quotes erd
\end_inset

 with UID 37007
\begin_inset Newline newline
\end_inset


\family typewriter
(strcmp(req->lname, "guest") == 0 && req->uid == 37007)
\end_layout

\begin_layout Standard

\family typewriter
b_userinfo
\family default
 has three different operation cases.
 The first is if 
\family typewriter
dest
\family default
 is not 
\family typewriter
NULL
\family default
, in which case at most s users are placed into 
\family typewriter
dest
\family default
, and the number of users stored (can never be greater than 
\family typewriter
s
\family default
, but may be less) is returned.
 Case two is that 
\family typewriter
dest
\family default
 is 
\family typewriter
NULL
\family default
 and 
\family typewriter
s
\family default
 is 
\family typewriter
0
\family default
, where 
\family typewriter
1
\family default
 is returned as soon as the first match is found.
 Case three, 
\family typewriter
dest
\family default
 is 
\family typewriter
NULL
\family default
 and 
\family typewriter
s
\family default
 is 
\family typewriter
1
\family default
, no users are copied, but the number of matches will be returned.
\end_layout

\begin_layout Standard
Again, the complement 
\family typewriter
b_groupinfo
\family default
 behaves just as like.
\end_layout

\begin_layout Standard

\family typewriter
b_userinfo
\family default
 and 
\family typewriter
b_groupinfo
\family default
 do not interrupt the traversion with 
\family typewriter
b_usertrav
\family default
\SpecialChar \slash{}

\family typewriter
b_grouptrav
\family default
.
 They use their own (local) traversion pointer.
\end_layout

\begin_layout Subsection
Adding a user or group
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxdb_useradd(
\series bold
void *
\series default
state, 
\series bold
struct
\series default
 vxdb_user 
\series bold
*
\series default
user);
\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 vxdb_groupadd(
\series bold
void *
\series default
state, 
\series bold
struct
\series default
 vxdb_group 
\series bold
*
\series default
group);
\end_layout

\begin_layout Standard

\family typewriter
b_useradd
\family default
 creates a new user in the database from the data provided in user.
 It duplicates all strings provided by an application and adds them to the
 database.
\end_layout

\begin_layout Standard
If 
\family typewriter
.lname
\family default
 is 
\family typewriter
NULL
\family default
, or there is no group specification in either 
\family typewriter
.gid
\family default
 or 
\family typewriter
.igrp
\family default
, 
\family typewriter
errno
\family default
 is to be set to 
\family typewriter
EINVAL
\family default
 and 
\family typewriter
0
\family default
 is to be returned.
 For 
\family typewriter
b_groupadd
\family default
, 
\family typewriter
errno
\family default
 is set to 
\family typewriter
EINVAL
\family default
 and 
\family typewriter
0
\family default
 is returned if 
\family typewriter
.gname
\family default
 is 
\family typewriter
NULL
\family default
.
 
\family typewriter
-errno
\family default
 is returned when something underlying 
\family typewriter
b_useradd
\family default
 (or 
\family typewriter
b_groupadd
\family default
) failed, like writing to the database.
\end_layout

\begin_layout Standard
If the 
\family typewriter
.uid
\family default
 or 
\family typewriter
.gid
\family default
 field is 
\family typewriter
-1
\family default
, automatic GID selection has to be done.
 The struct needs to be updated to reflect this.
 (However, we can not update struct vxdb_user .group as it is a string, so
 the application needs to re-lookup the user with the new UID.)
\end_layout

\begin_layout Subsection
Modifying a user or group
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxdb_usermod(
\series bold
void *
\series default
state, 
\series bold
struct
\series default
 vxdb_user 
\series bold
*
\series default
user, 
\series bold
struct
\series default
 vxdb_user 
\series bold
*
\series default
mask); 
\series bold
int
\series default
 vxdb_groupmod(
\series bold
void *
\series default
state, 
\series bold
struct
\series default
 vxdb_group 
\series bold
*
\series default
user,
\begin_inset Newline newline
\end_inset

                  
\series bold
struct
\series default
 vxdb_group 
\series bold
*
\series default
mask);
\end_layout

\begin_layout Standard
b_usermod() searches for the next matching user/group and modifies its account
 information.
 NULL or -1 fields (respectively) mean ignore, for both search mask (user)
 and modification mask (mask).
\end_layout

\begin_layout Standard
You should take care that the search mask does not match multiple users,
 otherwise it is undefined which user that could match is modified.
\end_layout

\begin_layout Subsection
Deleting a user or group
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxdb_userdel(
\series bold
void *
\series default
state, 
\series bold
struct
\series default
 vxdb_user 
\series bold
*
\series default
user);
\begin_inset Newline newline
\end_inset


\series bold
int
\series default
 vxdb_groupdel(
\series bold
void *
\series default
state, 
\series bold
struct
\series default
 vxdb_group 
\series bold
*
\series default
group);
\end_layout

\begin_layout Standard
Deletes the [first] user/group matching user/group, respectively.
\end_layout

\begin_layout Subsection
Module info
\end_layout

\begin_layout Standard
Beautify the module by using the macros 
\family typewriter
MODULE_NAME(
\family default
\shape italic
string
\family typewriter
\shape default
)
\family default
, 
\family typewriter
MODLUE_DESC(
\family default
\shape italic
string
\family typewriter
\shape default
)
\family default
 and/or 
\family typewriter
MODULE_INFO(
\family default
\shape italic
string
\family typewriter
\shape default
)
\family default
.
 This is not mandatory, and applications must handle this situation if 
\family typewriter
((struct vxdb_state *)m)->desc
\family default
 is 
\family typewriter
NULL
\family default
.
\end_layout

\begin_layout Subsection
Module control interface
\end_layout

\begin_layout LyX-Code

\series bold
int
\series default
 vxdb_modctl(
\series bold
struct
\series default
 vxdb_state 
\series bold
*
\series default
mp, 
\series bold
long
\series default
 request, 
\series bold
...
\series default
);
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\start_of_appendix
\begin_inset CommandInset index_print
LatexCommand printindex

\end_inset


\end_layout

\end_body
\end_document
