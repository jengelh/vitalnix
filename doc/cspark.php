<?php include_once("zheader.php"); ?>

<h1>Name <img src="d_arr.png" /></h1>

<p class="block">C-spark -- User Management UI</p>

<h1>Description <img src="d_arr.png" /></h1>

<p class="block">C-Spark is a tool for the mass registration of users within
the system user database. It finds the differences between a given list and the
user database, adds and deletes users. It thus removes the need for adding each
user manually. It also supports operations on/with single users.</p>

<p class="block">This application may come handy in companies, schools/colleges
and/or similar where there is a large amount of people to manage and adding
them would otherwise take long.</p>

<p class="block">Finding differences is group-based: select a group to match
the list against. This allows for multiple groups and lists.</p>

<p class="block">Currently, C-Spark has the "autorun" (non-interactive) and CLI
(simplistic interactive) interfaces. In future I hope to add a CUI (graphical
interactive).</p>

<h1>Screenshots <img src="d_arr.png" /></h1>

<ul>
  <li><a href="cspark_linux.png">C-Spark doing its work</a></li>
  <li><a href="cspark_mingw.png">How it is like in MinGW</a></li>
  <li><a href="cspark_win32.png">Not that different in a Win32 cmd box</a></li>
</ul>

<h1>Program calling syntax <img src="d_arr.png" /></h1>

<p class="block">Due to its so-called "autorun" mode, there are a lot of
options. They will be explained below, but in the green overview box, only the
most important are shown.</p>

<div class="pleft">
<table border="1" class="bordered">
  <tr>
    <td class="cmd"><tt>cspark [-M module] [-P] [-S] [-U] [-c config]</tt></td>
  </tr>
</table>
</div>

<div class="pleft">
<table border="1" class="bordered">
  <tr>
    <td class="t1">-M backend</td>
    <td class="t1">Uses the specified backend rather than the default one
      listed in the SparkUI configuration file</td>
  </tr>
  <tr>
    <td class="t2">-P</td>
    <td class="t2">Start the password list printing process. Only
      <tt>--P[iost]</tt> preceding a <tt>-P</tt> are valid for that one. (Since
      you can specify multiple <tt>-P</tt>.)</p>
  </tr>
  <tr>
    <td class="t1">--Ph</td>
    <td class="t1">Show all available styles. Styles which require a template
      will have an asterisk shown next to them.</td>
  </tr>
  <tr>
    <td class="t2">--Pi file</td>
    <td class="t2">Take the given logfile (as generated by <tt>-S</tt> as
      input</td>
  </tr>
  <tr>
    <td class="t1">--Po file</td>
    <td class="t1">Write the beautified output to FILE</td>
  </tr>
  <tr>
    <td class="t2">--Ps style</td>
    <td class="t2">Use the given style (and thus, file format) for the output
      file</td>
  </tr>
  <tr>
    <td class="t1">--Pt template</td>
    <td class="t1">If required by the style, use the given file as the template
      for this style.</td>
  </tr>
  <tr>
    <td class="t2">-S</td>
    <td class="t2">Start the synchronization process between the system user
      database and the given list. Only <tt>--S[gio]</tt> preceding a
      <tt>-S</tt> are valid for that one.</td>
  </tr>
  <tr>
    <td class="t1">--Sg group</td>
    <td class="t1">Specify the system group to compare against within the next
      synchronization</td>
  </tr>
  <tr>
    <td class="t2">--Si infile</td>
    <td class="t2">The XML Data Source file to read from</td>
  </tr>
  <tr>
    <td class="t1">--So outfile</td>
    <td class="t1">The log file to which the actions taken (added, deleted)
      shall be written.</td>
  </tr>
  <tr>
    <td class="t2">-U</td>
    <td class="t2">Add a single user using the parameters given with
      <tt>--U[bgnvx]</tt>. They also must precede a particular
      <tt>-U</tt>.</td>
  </tr>
  <tr>
    <td class="t1">--Ub bday</td>
    <td class="t1">Scrambles the birthdate so it can be used as XUID. The
      scrambling is "cryptographically weak" and is a <i>simple</i> measure to
      stop curious users. The format of <tt>bday</tt> can be D.M.Y, M/D/Y or
      Y-M-D. Two- and three-digit years are accepted and will be handled
      respectively.</td>
  </tr>
  <tr>
    <td class="t2">--Ug group</td>
    <td class="t2">The system group the user should be added to</td>
  </tr>
  <tr>
    <td class="t1">--Un lastname</td>
    <td class="t1">The last name (Nachname) of this user</td>
  </tr>
  <tr>
    <td class="t2">--Uv firstname</td>
    <td class="t2">The first name (Vorname) of this user</td>
  </tr>
  <tr>
    <td class="t1">--Ux xuid</td>
    <td class="t1">Provide a XUID (External Unique Identification Number within
      the Data Source). Do not mix with <tt>--Ub</tt>!</td>
  </tr>
  <tr>
    <td class="t2">-c config</td>
    <td class="t2">Loads configuration file (on top of the default hardcoded,
      <tt>/etc/spark.conf</tt> and <tt>cui/../vetc/spark.conf</tt>. See the
      <i>Configuration File</i> section for details.</td>
  </tr>
</table>
</div>

<p class="block"><i>Please note that option with more than one character (such
as <tt>Ph</tt>, etc.) need a double dash, which your browser might not display
that clearly as you would expect.</i></p>

<p class="block">Here are a few examples for the Autorun mode usage. If that's
too complex for you, better use the Interactive mode by providing no Autorun
arguments and/or parameters.</p>

<div class="pleft2">
<table border="1" class="bordered">
  <tr>
    <td class="cmd"><tt><b>#</b> cspark --Si staff.xml --So today.log --Sg staff -S<br />
      <b>#</b> cspark --Pi today.log --Po today.rtf --Ps sg_rtf --Pt supply/sg.rtf -P<br />
      <b>#</b> cspark --Uv Jan --Un Engelhardt --Ug staff --Ub 22.05.1986 -U</tt></p>
  </tr>
</table>
</div>

<p class="block">The first command reads <tt>staff.xml</tt>, diffs it against
the <tt>staff</tt> group found in the user database and writes the new users'
passwords to <tt>today.log</tt>.</p>

<p class="block">T'second command transforms <tt>today.log</tt> into a nice RTF
file <tt>today.rtf</tt> (print with Office) using the template
<tt>supply/sg.rtf</tt>.</p>

<p class="block">Last command adds a single user, self-explanatory here.</p>

<h1>Configuration file <img src="d_arr.png" /></h1>

<p class="block">Configuration files are done in textual
<tt>key=value</tt>-pair style. (Described in <a href="accdb_api.php">ACCDB
API</a>.) There are a number of configuration variables available, which will
be discussed here. The <tt>spark.cfg</tt> from CVS contains what I experimented
with, so if it says "default" somewhere, the hardcoded value and/or
<tt>spark.cfg</tt> from official file package releases are meant.</p>

<h2>AUTOFLUSH option</h2>

<p class="block">This is a special option for the backend module usage. If
<tt>AUTOFLUSH</tt> is on for a backend module, it flushes dirty data to disk
(or instructs its parent to do so).</p>

<p class="block">This flushing only becomes necessary, if other applications
read the user database behind Vitalnix ACCDB, because a newly created user
might only exist within memory and the scope of ACCDB until the DB is flushed
to disk.</p>

<div class="pleft">
<table border="1" class="bordered">
  <tr>
    <td class="t1"><tt>off</tt></td>
    <td class="t1">Explicitly disabled ACCDB's AUTOFLUSH option. This is the
      default, as the time used to run through a user list is small (at least
      for my test environment of 1500 users).</td>
  </tr>
  <tr>
    <td class="t2"><tt>on</tt></td>
    <td class="t2">Explicitly enables ACCDB's AUTOFLUSH option. (Might result
      in performance loss.)</td>
  </tr>
  <tr>
    <td class="t1"><tt>default</tt></td>
    <td class="t1">Does not touch ACCDB's AUTOFLUSH in any way. The default
      autoflush value depends on the particular backend module.</td>
  </tr>
  <tr>
    <td class="t2"><tt>postadd</tt></td>
    <td class="t2">About the same as <tt>off</tt>, and only performs a flush
      request before a <tt>USER_POSTADD</tt> script is run. Use this if you
      have a postadd script that deals with login names in a way that it would
      not work otherwise.</td>
  </tr>
</table>
</div>

<h2>User management helper programs</h2>

<p class="block"><tt>MASTER_{PRE,POST}{ADD,DEL}</tt> specify scripts that are
to be executed { before, after } the { addition, deletion } process. The
available placeholder specifiers are concluded below.</p>

<p class="block"><tt>USER_{PRE,POST}{ADD,DEL}</tt> specify scripts that are
to be executed { before, after } a user is { added, deleted }. Some of these
might not be called if there are no users to { add, delete }. The available
placeholders are concluded below.</p>

<div class="pleft">
<table border="1" class="bordered">
  <tr>
    <td class="t2">Variable</td>
    <td class="t2">String</td>
    <td class="t2">Effect</td>
  </tr>
  <tr>
    <td class="t1"><tt>MASTER_PREADD</tt></td>
    <td class="t1" nowrap="nowrap"><tt>%n</tt></td>
    <td class="t1">The number of users <i>about to be</i> added</td>
  </tr>
  <tr>
    <td class="t2"><tt>MASTER_POSTADD</tt></td>
    <td class="t2" nowrap="nowrap"><tt>%n</tt></td>
    <td class="t2">The number of users that <i>were actually</i> added</td>
  </tr>
  <tr>
    <td class="t1"><tt>MASTER_PREDEL</tt></td>
    <td class="t1" nowrap="nowrap"><tt>%n</tt></td>
    <td class="t1">The number of users <i>about to be</i> deleted</td>
  </tr>
  <tr>
    <td class="t2">&nbsp;</td>
    <td class="t2" nowrap="nowrap"><tt>%d</tt></td>
    <td class="t2">"Current" (= start of deletion function
      <tt>import_ds_Delete()</tt>) date and time ("YYYYMMDD-HHMMSS"
      format)</td>
  </tr>
  <tr>
    <td class="t1"><tt>MASTER_POSTDEL</tt>
    <td class="t1" nowrap="nowrap"><tt>%n</tt></td>
    <td class="t1">The number of users that <i>were actually</i> deleted</td>
  </tr>
  <tr>
    <td class="t2">&nbsp;</td>
    <td class="t2" nowrap="nowrap"><tt>%d</tt></td>
    <td class="t2">"Current" date and time ("YYYYMMDD-HHMMSS" format)</td>
  </tr>
  <tr>
    <td class="t1"><tt>USER_PREADD</tt></td>
    <td class="t1" nowrap="nowrap"><tt>%l</tt></td>
    <td class="t1">Login name</td>
  </tr>
  <tr>
    <td class="t2">&nbsp;</td>
    <td class="t2" nowrap="nowrap"><tt>%u</tt></td>
    <td class="t2">UID of the user (may be <tt>-1</tt> to indicate automatic
      UID selection (which has not been done yet!))</td>
  </tr>
  <tr>
    <td class="t1">&nbsp;</td>
    <td class="t1" nowrap="nowrap"><tt>%g</tt></td>
    <td class="t1">GID of the user's primary group</td>
  </tr>
  <tr>
    <td class="t2">&nbsp;</td>
    <td class="t2" nowrap="nowrap"><tt>%G</tt></td>
    <td class="t2">Name of the user's primary group</td>
  </tr>
  <tr>
    <td class="t1">&nbsp;</td>
    <td class="t1" nowrap="nowrap"><tt>%S</tt></td>
    <td class="t1">Names of the user's supplementary groups, separated by comma.
      (May be empty)</td>
  </tr>
  <tr>
    <td class="t2">&nbsp;</td>
    <td class="t2" nowrap="nowrap"><tt>%n</tt></td>
    <td class="t2">GECOS field</td>
  </tr>
  <tr>
    <td class="t1">&nbsp;</td>
    <td class="t1" nowrap="nowrap"><tt>%h</tt></td>
    <td class="t1">Home directory</td>
  </tr>
  <tr>
    <td class="t2">&nbsp;</td>
    <td class="t2" nowrap="nowrap"><tt>%s</tt></td>
    <td class="t2">Default shell</td>
  </tr>
  <tr>
    <td class="t1"><tt>USER_POSTADD</tt></td>
    <td class="t1">&nbsp;</td>
    <td class="t1">Same fields as for <tt>USER_PREADD</tt></td>
  </tr>
  <tr>
    <td class="t2"><tt>USER_PREDEL</tt></td>
    <td class="t2"><tt>%l</tt></td>
    <td class="t2">Login name</td>
  </tr>
  <tr>
    <td class="t1">&nbsp;</td>
    <td class="t1"><tt>%u</tt></td>
    <td class="t1">UID of the user</td>
  </tr>
  <tr>
    <td class="t2">&nbsp;</td>
    <td class="t2"><tt>%g</tt></td>
    <td class="t2">GID of the user's primary group</td>
  </tr>
  <tr>
    <td class="t1">&nbsp;</td>
    <td class="t1"><tt>%G</tt></td>
    <td class="t1">Name of the user's primary group</td>
  </tr>
  <tr>
    <td class="t2">&nbsp;</td>
    <td class="t2"><tt>%h</tt></td>
    <td class="t2">Home directory</td>
  </tr>
  <tr>
    <td class="t1">&nbsp;</td>
    <td class="t1"><tt>%d</tt></td>
    <td class="t1">"Current" date and time ("YYYYMMDD-HHMMSS" format)</td>
  </tr>
  <tr>
    <td class="t2"><tt>USER_POSTDEL</tt></td>
    <td class="t2"><tt>%l</tt></td>
    <td class="t2">Login name</td>
  </tr>
  <tr>
    <td class="t1">&nbsp;</td>
    <td class="t1"><tt>%d</tt></td>
    <td class="t1">"Current" date and time ("YYYYMMDD-HHMMSS" format)</td>
  </tr>
</table>
</div>

<h2>Programs</h2>

<p class="block"><tt>SHELL</tt> points to the default command interpreter for
the user when s/he logs in. Default is <tt>/bin/bash</tt>.</p>

<h2>Password related options</h2>

<p class="block">Three options related to password creation and storage are
available: <tt>PSWD_LEN</tt>, <tt>PSWD_PHON</tt> and <tt>PSWD_METH</tt>.</p>

<p class="block"><tt>PSWD_LEN</tt> controls the length of newly generated
passwords. Use <tt>-1</tt> to disable newly generated accounts using a password
that never matches. Use <tt>0</tt> to start with no password. The latter may
not always work as remote services may disallow empty passwords. See their
source or their respective PAM configuration file.</p>

<p class="block">If <tt>PSWD_PHON</tt> is set to <tt>yes</tt> (or <tt>on</tt>),
special subroutines to generate pronouncible, easy-rememberable (and on top,
secure) passwords are used. If this is <tt>no</tt>, the standard
total-random-chars-and-numbers-algorithm is taken.</p>

<p class="block"><tt>PSWD_METH</tt> specifies the encryption method to use.
This can be <tt>des</tt>, <tt>md5</tt> or <tt>blowfish</tt>. (The last is the
most secure.) If you use "samba encrypted passwords" you will need to use
<tt>ntlm</tt> (absolutely weak and currently not implemented).</p>

<h2>Directory options</h2>

<p class="block"><tt>HOME</tt> points to the path where new directories shall
be added. In most cases, this will be <tt>/home</tt>.</p>

<p class="block"><tt>SPLIT_LVL</tt> enables how to arrange home directories. If
you have a large amount of users, it may become advisable to split them up,
since listing such a big directory (<tt>/home</tt>) containing some thousand
entries takes some time (well, not with reiser4). The solution to this is to
move them to sub directories, i.e. to create <tt>/home/j/jengelh</tt>. This
speeds up single lookups, and searching all <tt>/home</tt> using find utilities
does not get any slower. The maximum value <tt>SPLIT_LVL</tt> is <tt>2</tt>
(which would create <tt>/home/j/je/jengelh</tt>). The default is <tt>0</tt>,
meaning not to use this feature.</p>

<p class="block"><tt>SKEL</tt> points to the skeleton directory. All files from
the skeleton directory are copied to the user's directory upon user creation.
The default is <tt>/var/lib/empty</tt>. (If you want to have all the dot.crap
files, change to <tt>/etc/skel</tt>.)</p>

<h1>Finding differences <img src="d_arr.png" /></h1>

<p class="block">Involving the <tt>diff</tt> utility could be quite an idea,
but it is a general differencer, comparing line-by-line. Since we just need to
compare fields, and that conditionally on their content, the use of diff would
make the whole program a lot more complicated.</p>

<p class="block">The first step is to take an input file, and compare it
against the current user database. Users which are found in both repositories
are kept, those who are only in the Data Source have to be added and the rest
is deleted. (Can be archived if demanded for.)</p>

<h1>Input data format <img src="d_arr.png" /></h1>

<p class="block">Data fed to C-spark is in XML format. See the tags <a
href="sp_xmlds.php">specification</a> for details. Or check out some data
source examples from the <tt>doc/examples</tt> folder.</p>

<?php include_once("zfooter.php"); ?>
