#!/usr/bin/perl
# Eintrag eines Schülers als neuen Benutzer
# von Eike Teiwes 20.03.97

# Für Test setze $test=1, sonst setze $test=0
$test=1;

if ($ARGV[0] eq "") {
    &fehlermeldung;
    &fehlermeldung2;
    exit;
}

&vorbereitungen;

# Daten des neuen Benutzers auslesen
&daten_auslesen;

if ($test) { print "ausgelesen: $neu\n"; }

# Daten des neuen Benutzers aufarbeiten
&daten_auswerten;

if ($test) { print "ausgewertet: $neu\n"; }

# Vorhandene Benutzernamen erfassen (/etc/passwd --> RAM)
&passwd_auslesen;

# Neuen Namen abgleichen
&daten_abgleichen;

if ($test) { print "abgeglichen: $neu\n"; }

# Datei /etc/passwd erweitern
&passwd_ergaenzen;

# Verzeichnisse einrichten und Datein kopieren
if ($test eq 0) { &kopieren_und_anpassen; }

# Kennwort in /etc/shadow eintragen
&kennworte_eintragen;

if ($test) { print "Das war ein TEST\n\n"; }

# --------------------------------------------------------------------

sub domain {
    @f=`find *.goe 2>/dev/null`;
    if ($f[0] eq "") {
	print "\nDer Name der Schule kann nicht ermittelt werden.\n";
        print "Bitte im lokalen Verzeichnis ein Verzeichnis oder eine Datei\n";
        print "xxx.goe anlegen, wobei xxx den Namen angibt.\n";
    } else {
        $domain=$f[0];
        chop($domain);
	$domain=$domain.".ni.schule.de";
    }
}

sub vorbereitungen {
#   domain automatisch ermitteln:    
    &domain;
#   domain vorgegeben
#   $domain="ohg.goe.ni.schule.de";
    @f=`find skel/ 2>/dev/null`;
    if ($f[0] eq "") {
	print "\nlokales Verzeichnis skel fehlt und wird eingerichtet.\n";
	system("mkdir skel");
	system("cp /etc/skel/.profile skel");
    }
    $gruppe=group("schueler");
    if ($gruppe eq "") {
	print "\nGruppe schueler fehlt in /etc/group.\n";
	print "Diese Gruppe zunachst einrichten.\n";
	exit;
    }
}

# --------------------------------------------------------------------

sub daten_auslesen {
    $g=0;
    $l=0;
    $f=0;
    $u=0;
    $gruppenname='users';
    $gruppe=group($gruppenname);
    while ($ARGV[0] ne "") {
	if ($ARGV[0] eq "-g") {
	    shift(@ARGV);
	    $gruppenname=$ARGV[0];
	    shift(@ARGV);
	    if (($gruppenname eq "") || (substr($gruppenname,0,1) eq "-")) {
                print "fehlerhafter Gruppenname\n";
                fehlermeldung;
		exit;
            }
            $gruppe=group($gruppenname);
            if ($gruppe eq "") {
		print "\nGruppe $gruppenname fehlt in /etc/group.\n";
		print "Diese Gruppe zunächst einrichten.\n";
		exit;
            }
	    $g=1;
            if ($test) { print "Gruppenname $gruppenname OK\n"; }
	} elsif ($ARGV[0] eq "-l") {
	    shift(@ARGV);
	    $nachname=$ARGV[0];
	    shift(@ARGV);
	    while (($ARGV[0] ne "") && (substr($ARGV[0],0,1) ne "-")) {
	        if ($nachname eq "") {
		    $nachname=$ARGV[0];
		} else {
		    $nachname=$nachname." ".$ARGV[0];
		}
                shift(@ARGV);
            }
	    $l=1;
	    if ($nachname eq "") {
                print "fehlerhafter Nachname\n";
		fehlermeldung;
                exit;
            }
	    if ($test) { print "Nachname $nachname OK\n"; }
	} elsif ($ARGV[0] eq "-f") {
	    shift(@ARGV);
            $vorname="";
	    while (($ARGV[0] ne "") && (substr($ARGV[0],0,1) ne "-")) {
	        if ($vorname eq "") {
		    $vorname=$ARGV[0];
		} else {
		    $vorname=$vorname."-".$ARGV[0];
		}
                shift(@ARGV);
            }
	    $f=1;
	    if ($vorname eq "") {
                print "fehlerhafter Vorname\n";
		fehlermeldung;
                exit;
            }
            if ($test) { print "Vorname $vorname OK\n"; }
	} elsif ($ARGV[0] eq "-d") {
	    shift(@ARGV);
            $date=$ARGV[0];
            shift(@ARGV);
	    if (($date eq "") || ($ARG[0] ne "")) {
                print "fehlerhaftes Datum\n";
                fehlermeldung;
                exit;
            } 
            if ($test) { print "Datum $date OK\n"; }
	} elsif ($ARGV[0] eq "-u") {
	    shift(@ARGV);
	    $user=$ARGV[0];
	    shift(@ARGV);
	    $u=1;
	    if ($user eq "") {
                print "fehlerhafter User\n";
		fehlermeldung;
                exit;
            }
	    if ($test) { print "User $user OK\n"; }
        } else {
	    print "unbekannter Fehler: $ARGV[0]\n";
            fehlermeldung;
            exit;
        }       
    }
    if ( $date=~/(\d+)\.(\d+)\.(\d+)(.*)/ ) {
 	if ($4 eq "") {
	    if (($1<32) && ($2<13) && ($3<2000)) {
		$t=sprintf("%02d",$1);
		$m=sprintf("%02d",$2);
		$j=substr($3,-2,2);
		$date=$t.".".$m.".".$j;
	    } else {
                print "Datum ist fehlerhaft\n";
		&fehlermeldung2;
                exit;
	    }
	} else {
            print "Datum hat fehlerhafte Struktur\n";
	    &fehlermeldung2;
            exit;
        }
    } else {
 	if ($gruppenname eq "schueler") {
	    print "Datum fehlt\n";
	    fehlermeldung;
	    &fehlermeldung2;
	    exit;
	} 
	else {
	    $date="00.00.00";
	}    
    }
    if ($u eq 0) {
	if ($g eq 0) {
	    print "Gruppe fehlt\n";
	}
	if ($l eq 0) {
	    print "Nachname fehlt\n";
	}
	if ($f eq 0) {
	    print "Vorname fehlt\n";
	}
	if ($g+$l+$f < 3) {
	    print "Abbruch\n";
	    fehlermeldung;
	    fehlermeldung2;
	    exit;
	}
        $neu=$nachname.":".$vorname.":".$date;
    } else {	
	$neu=$user;
    }
}
# --------------------------------------------------------------------

sub daten_auswerten {
	$_=$neu;
	s/ä/ae/g;
	s/ö/oe/g;
	s/ü/ue/g;
	s/Ä/Ae/g;
	s/Ö/Oe/g;
	s/Ü/Ue/g;
	s/ß/ss/g;
	s/é/e/g;
	s/è/e/g;
        s/á/a/g;
	s/à/a/g;
	($lastname,$firstname,$date)=split(/:/,$_);
	$_=$lastname;
	s/von //;
	s/zur //;
	s/der //;
	s/dem //;
	s/(\w+)-(\w+)/$1/;
  	$_=substr($firstname,0,1).substr($_,0,6);
	tr/A-Z/a-z/;
	$name=$_;
	$fullname=$firstname." ".$lastname;
	$code=code($date);
        if ($gruppenname eq "schueler") {
	    $neu=$name.":".$fullname.",".$code;
	} else {
	    $neu=$name.":".$fullname;
	}    
}

# --------------------------------------------------------------------

sub passwd_auslesen {
    $i=0;
    open (PWD,"/etc/passwd");
    while (<PWD>) {
	chop;
        ($name,$passwd,$uid,$gid,$gcos)=split(/:/);
        #($fullname,$code)=split(/,/,$gcos);
	$feld{$name}=$gcos;
	if ($gid eq $gruppe) {
            ++$i;
        }
    }	
    close(PWD);
}

# --------------------------------------------------------------------

sub daten_abgleichen {
        $_=$neu;
	($name,$gcos)=split(/:/);
        ($fullname,$code)=split(/,/,$gcos);
        $vorhanden="n";
	if ($feld{$name} eq $gcos){
	    $vorhanden="";
	}
	foreach $i (1..9,A..Z) {
	    if ($feld{$name.$i} eq $gcos) {
		$vorhanden=$i;
	    }
        }
        if ($vorhanden ne "n") {	
	    print "ACHTUNG: $fullname ist als $name$vorhanden vorhanden\n";
	    exit;
	}    
	$_=$name."Z";
	if ($feld{$_} ne "") {
	    print "ÜBERLAUF: Alle $name sind belegt!\n";
	} else {
	    while ((/.*[1-9A-Z]/) && ($feld{$_} eq "")) {
		tr/1-9A-Z/0-9A-Y/;
	    }
	    #print "!!! abwärts bis $_\n";
            if ((/.*[1-9A-Z]/) || ($feld{$name} ne "")) {
		#print "!!! $_ belegt, suche weiter ... ";
		tr/0-9A-Y/1-9A-Z/;
		#print "!!! finde $_ !!!\n";
	    } 
        }
	s/0//;
	#print "!!! Name: $_\n";
	#$feld{$_}=$fullname.$date;
	$neu=$_.":".$gcos;
}

# --------------------------------------------------------------------

sub passwd_ergaenzen {
    $_=$neu;
    ($name,$gcos)=split(/:/);
    ($fullname)=split(/,/,$gcos);
    print ("#".$gcos."#");
    if ($gcos[0] eq " ") {
	print "leer\n";
	exit;
    }
    print "useradd -c '$gcos' -g $gruppe -m -k skel $name\n";
    if ($test eq 0) {
	system("useradd -c '$gcos' -g $gruppe -m -k skel $name");
    }
    system("./pwd $name > datpwd");
}

# --------------------------------------------------------------------

sub kopieren_und_anpassen {
    # Verzeichnisse
    system("mkdir /home/$name/system");
    system("mkdir /home/$name/system/mail");
    system("mkdir /home/$name/system/news");
    # Dateien
    system("cp address.htm /home/$name/system");
    system("cp bookmark.htm /home/$name/system");
    open(N_IN,"netscape.ini");
    open(N_OUT,">/home/$name/system/netscape.ini");
    while (<N_IN>) {
	if ($_ eq "") {
	    next;
	}
	if (/User_Addr=/) {
	    s/User_Addr=.*/User_Addr=$name\@$domain/;
	}
	if (/User_Name=/) {
	    s/User_Name=.*/User_Name=$fullname/;
	}
	if (/POP Name=/) {
	    s/POP Name=.*/ POP Name=$name/;
	}
	print N_OUT $_;
    }
    close(N_IN);
    close(N_OUT);
    # Rechte
    system("chown -R $name /home/$name/system");
    system("chgrp -R $gruppe /home/$name/system");
}

# --------------------------------------------------------------------

sub kennworte_eintragen {
    if ($test eq 0) {
	system("chpasswd < datpwd");
    }
    $_=`grep $name datpwd`;
    s/([a-z0-9\-]+)\://;
    print "\nBenutzername: $name\nVorläufiges Kennwort: $_\n";
    #unlink("datpwd");
}

# --------------------------------------------------------------------

sub next_index {
    $_=sprintf("%03d",max_index(@_)+1);
    $_;
}

# --------------------------------------------------------------------

sub max_index {
    local($max)="000";
    foreach (`find @_ 2>/dev/null`) {
	$i=substr($_,-3,3);
	if ($i>$max) {
	    $max=$i;
	}
    }	
    $_=sprintf("%03d",$max);
    $_;
}

# --------------------------------------------------------------------

sub code {
    local($date)=@_;
    $date=substr($date,6,2).substr($date,3,2).substr($date,0,2);
    $date*937;
}

# --------------------------------------------------------------------

sub decode {
    local($code)=@_;
    $code=$code/937;
    substr($code,4,2).".".substr($code,2,2).".".substr($code,0,2);
}

# --------------------------------------------------------------------

sub group {
    local($name)=@_;
    $name=$name."\:";
    $_=`grep $name /etc/group`;
    /(\w+)\W+(\w+)\W+(\w+)/;
    $3;
}

# --------------------------------------------------------------------

sub fehlermeldung {
    print "usage: add -g group -l lastname -f firstname [firstname] [-d date]\n";
}

# --------------------------------------------------------------------

sub fehlermeldung2 {
    print "usage: add -g schueler -l Dingsda -f Hans Rüdiger=von -d 12.04.87\n";
}




